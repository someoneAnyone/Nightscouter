//
//  NSAssetKit.swift
//  Nightscout
//
//  Created by Peter Ina on 5/25/16.
//  Copyright (c) 2016 Nothingonline.net. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

open class NSAssetKit : NSObject {

    //// Cache

    fileprivate struct Cache {
        static let appLogoTintColor: UIColor = UIColor(red: 0.000, green: 0.451, blue: 0.812, alpha: 1.000)
        static let predefinedWarningColor: UIColor = UIColor(red: 1.000, green: 0.902, blue: 0.125, alpha: 1.000)
        static let predefinedPostiveColor: UIColor = UIColor(red: 0.016, green: 0.871, blue: 0.443, alpha: 1.000)
        static let predefinedAlertColor: UIColor = UIColor(red: 1.000, green: 0.067, blue: 0.310, alpha: 1.000)
        static let predefinedNeutralColor: UIColor = UIColor(red: 0.851, green: 0.851, blue: 0.851, alpha: 1.000)
        static let predefinedLogoColor: UIColor = UIColor(red: 0.363, green: 0.363, blue: 0.363, alpha: 1.000)
        static let darkNavColor: UIColor = NSAssetKit.appLogoTintColor.colorWithShadow(0.6)
        static var imageOfListIcon: UIImage?
        static var listIconTargets: [AnyObject]?
        static var imageOfSettingsIcon: UIImage?
        static var settingsIconTargets: [AnyObject]?
        static var imageOfAlarmIcon: UIImage?
        static var alarmIconTargets: [AnyObject]?
        static var imageOfAlarmSliencedIcon: UIImage?
        static var alarmSliencedIconTargets: [AnyObject]?
    }

    //// Colors

    @objc open class var appLogoTintColor: UIColor { return Cache.appLogoTintColor }
    @objc open class var predefinedWarningColor: UIColor { return Cache.predefinedWarningColor }
    @objc open class var predefinedPostiveColor: UIColor { return Cache.predefinedPostiveColor }
    @objc open class var predefinedAlertColor: UIColor { return Cache.predefinedAlertColor }
    @objc open class var predefinedNeutralColor: UIColor { return Cache.predefinedNeutralColor }
    @objc open class var predefinedLogoColor: UIColor { return Cache.predefinedLogoColor }
    @objc open class var darkNavColor: UIColor { return Cache.darkNavColor }

    //// Drawing Methods

    @objc open class func drawWatchFaceOnly(_ frame: CGRect = CGRect(x: 0, y: 0, width: 156, height: 195), arrowTintColor: UIColor = UIColor(red: 1.000, green: 0.067, blue: 0.310, alpha: 1.000), angle: CGFloat = 0, isArrowVisible: Bool = true, doubleUp: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let arrowTintHighlightColor = arrowTintColor.colorWithHighlight(0.1)
        let arrowTintShadowColor = arrowTintColor.colorWithShadow(0.2)
        let arrowTintShadowColorDarker = arrowTintColor.colorWithShadow(0.6)
        let almostWhite = arrowTintColor.colorWithHighlight(0.9)

        //// Gradient Declarations
        let arrowGradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(), colors: [arrowTintHighlightColor.cgColor, arrowTintHighlightColor.blendedColorWithFraction(0.5, ofColor: arrowTintShadowColor).cgColor, arrowTintShadowColor.cgColor] as CFArray, locations: [0, 0.5, 1])!

        //// Shadow Declarations
        let dropShaddow = NSShadow()
        dropShaddow.shadowColor = arrowTintShadowColorDarker.withAlphaComponent(0.7 * arrowTintShadowColorDarker.cgColor.alpha)
        dropShaddow.shadowOffset = CGSize(width: 0.1, height: 0.6)
        dropShaddow.shadowBlurRadius = 1
        let innerShaddow = NSShadow()
        innerShaddow.shadowColor = almostWhite.withAlphaComponent(0.76 * almostWhite.cgColor.alpha)
        innerShaddow.shadowOffset = CGSize(width: 0.1, height: 1.1)
        innerShaddow.shadowBlurRadius = 0

        //// Variable Declarations
        let arrowNotVisible = !isArrowVisible

        if (doubleUp) {
            //// doubleRingWithArrow Drawing
            context.saveGState()
            context.translateBy(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.53248 * frame.height)
            context.rotate(by: -angle * CGFloat(Double.pi) / 180)

            let doubleRingWithArrowPath = UIBezierPath()
            doubleRingWithArrowPath.move(to: CGPoint(x: -0, y: -68.33))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -0.53, y: -68.33))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -0.67, y: -68.33))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -1.05, y: -68.33), controlPoint1: CGPoint(x: -0.82, y: -68.33), controlPoint2: CGPoint(x: -0.94, y: -68.33))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -1.26, y: -68.32))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -1.58, y: -68.32))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -1.8, y: -68.31))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -2.1, y: -68.3), controlPoint1: CGPoint(x: -1.9, y: -68.31), controlPoint2: CGPoint(x: -2, y: -68.31))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -2.33, y: -68.3), controlPoint1: CGPoint(x: -2.18, y: -68.3), controlPoint2: CGPoint(x: -2.25, y: -68.3))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -2.62, y: -68.29), controlPoint1: CGPoint(x: -2.43, y: -68.29), controlPoint2: CGPoint(x: -2.53, y: -68.29))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -2.81, y: -68.28))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -3.14, y: -68.26), controlPoint1: CGPoint(x: -2.95, y: -68.27), controlPoint2: CGPoint(x: -3.05, y: -68.27))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -3.38, y: -68.25), controlPoint1: CGPoint(x: -3.22, y: -68.26), controlPoint2: CGPoint(x: -3.3, y: -68.26))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -3.67, y: -68.24), controlPoint1: CGPoint(x: -3.48, y: -68.25), controlPoint2: CGPoint(x: -3.57, y: -68.24))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -3.9, y: -68.23))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -4.19, y: -68.21))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -4.43, y: -68.2))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -4.7, y: -68.18))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -4.95, y: -68.16), controlPoint1: CGPoint(x: -4.78, y: -68.17), controlPoint2: CGPoint(x: -4.86, y: -68.17))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -5.22, y: -68.14), controlPoint1: CGPoint(x: -5.04, y: -68.15), controlPoint2: CGPoint(x: -5.13, y: -68.15))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -5.46, y: -68.12), controlPoint1: CGPoint(x: -5.3, y: -68.14), controlPoint2: CGPoint(x: -5.38, y: -68.13))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -5.69, y: -68.1))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -5.98, y: -68.08), controlPoint1: CGPoint(x: -5.82, y: -68.09), controlPoint2: CGPoint(x: -5.9, y: -68.09))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -6.26, y: -68.06), controlPoint1: CGPoint(x: -6.07, y: -68.07), controlPoint2: CGPoint(x: -6.16, y: -68.07))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -6.5, y: -68.04))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -6.77, y: -68.01), controlPoint1: CGPoint(x: -6.59, y: -68.03), controlPoint2: CGPoint(x: -6.68, y: -68.02))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -7.01, y: -67.99))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -7.28, y: -67.96))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -7.52, y: -67.93))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -7.8, y: -67.9), controlPoint1: CGPoint(x: -7.61, y: -67.92), controlPoint2: CGPoint(x: -7.71, y: -67.91))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -8.03, y: -67.88), controlPoint1: CGPoint(x: -7.88, y: -67.89), controlPoint2: CGPoint(x: -7.96, y: -67.89))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -8.31, y: -67.84), controlPoint1: CGPoint(x: -8.13, y: -67.87), controlPoint2: CGPoint(x: -8.22, y: -67.85))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -8.54, y: -67.82))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -8.83, y: -67.78))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -9.05, y: -67.75), controlPoint1: CGPoint(x: -8.9, y: -67.77), controlPoint2: CGPoint(x: -8.98, y: -67.76))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -9.34, y: -67.71), controlPoint1: CGPoint(x: -9.15, y: -67.74), controlPoint2: CGPoint(x: -9.25, y: -67.73))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -9.55, y: -67.69))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -9.86, y: -67.64))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -10.07, y: -67.61))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -10.39, y: -67.57))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -10.58, y: -67.54))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -10.96, y: -67.48))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -11.08, y: -67.46), controlPoint1: CGPoint(x: -11, y: -67.47), controlPoint2: CGPoint(x: -11.04, y: -67.47))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -11.58, y: -67.38), controlPoint1: CGPoint(x: -11.25, y: -67.43), controlPoint2: CGPoint(x: -11.42, y: -67.41))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -11.71, y: -67.36))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -12.08, y: -67.29))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -12.24, y: -67.26))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -12.59, y: -67.2), controlPoint1: CGPoint(x: -12.38, y: -67.24), controlPoint2: CGPoint(x: -12.48, y: -67.22))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -12.79, y: -67.16), controlPoint1: CGPoint(x: -12.66, y: -67.19), controlPoint2: CGPoint(x: -12.72, y: -67.18))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -13.09, y: -67.11), controlPoint1: CGPoint(x: -12.89, y: -67.15), controlPoint2: CGPoint(x: -12.99, y: -67.13))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -13.3, y: -67.07), controlPoint1: CGPoint(x: -13.16, y: -67.1), controlPoint2: CGPoint(x: -13.23, y: -67.08))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -13.58, y: -67.01), controlPoint1: CGPoint(x: -13.4, y: -67.05), controlPoint2: CGPoint(x: -13.49, y: -67.03))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -13.81, y: -66.97), controlPoint1: CGPoint(x: -13.66, y: -67), controlPoint2: CGPoint(x: -13.73, y: -66.98))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -14.08, y: -66.91), controlPoint1: CGPoint(x: -13.9, y: -66.95), controlPoint2: CGPoint(x: -13.99, y: -66.93))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -14.31, y: -66.87), controlPoint1: CGPoint(x: -14.16, y: -66.9), controlPoint2: CGPoint(x: -14.23, y: -66.88))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -14.58, y: -66.81))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -14.77, y: -66.77))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -15.06, y: -66.71))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -15.3, y: -66.65))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -15.57, y: -66.59), controlPoint1: CGPoint(x: -15.39, y: -66.63), controlPoint2: CGPoint(x: -15.48, y: -66.61))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -15.79, y: -66.54), controlPoint1: CGPoint(x: -15.64, y: -66.57), controlPoint2: CGPoint(x: -15.72, y: -66.56))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -16.06, y: -66.48), controlPoint1: CGPoint(x: -15.88, y: -66.52), controlPoint2: CGPoint(x: -15.97, y: -66.5))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -16.29, y: -66.42), controlPoint1: CGPoint(x: -16.13, y: -66.46), controlPoint2: CGPoint(x: -16.21, y: -66.44))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -16.55, y: -66.36), controlPoint1: CGPoint(x: -16.37, y: -66.4), controlPoint2: CGPoint(x: -16.46, y: -66.38))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -30.57, y: -61.3), controlPoint1: CGPoint(x: -21.45, y: -65.17), controlPoint2: CGPoint(x: -26.15, y: -63.46))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -69.09, y: 0), controlPoint1: CGPoint(x: -53.4, y: -50.14), controlPoint2: CGPoint(x: -69.09, y: -26.88))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -0, y: 68.33), controlPoint1: CGPoint(x: -69.09, y: 37.74), controlPoint2: CGPoint(x: -38.16, y: 68.33))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: 69.09, y: 0), controlPoint1: CGPoint(x: 38.16, y: 68.33), controlPoint2: CGPoint(x: 69.09, y: 37.74))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: 16.66, y: -66.33), controlPoint1: CGPoint(x: 69.09, y: -32.06), controlPoint2: CGPoint(x: 46.77, y: -58.96))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: 14.66, y: -66.79), controlPoint1: CGPoint(x: 16, y: -66.5), controlPoint2: CGPoint(x: 15.33, y: -66.65))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 14.18, y: -66.89))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 14.1, y: -66.91))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 13.67, y: -66.99))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 13.61, y: -67.01))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: 12.13, y: -67.28), controlPoint1: CGPoint(x: 13.12, y: -67.1), controlPoint2: CGPoint(x: 12.63, y: -67.2))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 12.04, y: -67.3))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 11.65, y: -67.37))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 11.53, y: -67.39))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 11.15, y: -67.45))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 11.04, y: -67.47))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 10.58, y: -67.54))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 10.05, y: -67.62))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 9.99, y: -67.62))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 9.57, y: -67.68))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 9.43, y: -67.7))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 9.08, y: -67.75))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 8.93, y: -67.77))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 8.58, y: -67.81))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 8.44, y: -67.83))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 8.01, y: -67.88))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 7.46, y: -67.94))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 7.35, y: -67.95))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 6.97, y: -67.99))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 6.81, y: -68.01))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 6.48, y: -68.04))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 6.31, y: -68.05))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 5.97, y: -68.08))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 5.82, y: -68.09))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 5.39, y: -68.13))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 5.33, y: -68.13))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 4.84, y: -68.17))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 4.7, y: -68.18))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 4.34, y: -68.2))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 4.17, y: -68.21))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 3.85, y: -68.23))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 3.67, y: -68.24))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 3.33, y: -68.26))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 3.17, y: -68.26))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 2.72, y: -68.28))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 2.18, y: -68.3))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 2.03, y: -68.3))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 1.68, y: -68.31))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 1.5, y: -68.32))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 1.18, y: -68.32))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 1, y: -68.33))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 0.66, y: -68.33))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: 0.5, y: -68.33))
            doubleRingWithArrowPath.addLine(to: CGPoint(x: -0, y: -68.33))
            doubleRingWithArrowPath.close()
            doubleRingWithArrowPath.move(to: CGPoint(x: 0, y: -88.83))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: 10.66, y: -74.43), controlPoint1: CGPoint(x: 0, y: -88.83), controlPoint2: CGPoint(x: 4.96, y: -82.13))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: 76, y: 0), controlPoint1: CGPoint(x: 47.59, y: -69.31), controlPoint2: CGPoint(x: 76, y: -37.93))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -0, y: 75.17), controlPoint1: CGPoint(x: 76, y: 41.51), controlPoint2: CGPoint(x: 41.97, y: 75.17))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -76, y: 0), controlPoint1: CGPoint(x: -41.97, y: 75.17), controlPoint2: CGPoint(x: -76, y: 41.51))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -36.45, y: -65.97), controlPoint1: CGPoint(x: -76, y: -28.45), controlPoint2: CGPoint(x: -60.02, y: -53.21))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: -10.66, y: -74.43), controlPoint1: CGPoint(x: -28.6, y: -70.23), controlPoint2: CGPoint(x: -19.9, y: -73.15))
            doubleRingWithArrowPath.addCurve(to: CGPoint(x: 0, y: -88.83), controlPoint1: CGPoint(x: -4.96, y: -82.13), controlPoint2: CGPoint(x: 0, y: -88.83))
            doubleRingWithArrowPath.close()
            context.saveGState()
            context.setShadow(offset: dropShaddow.shadowOffset, blur: dropShaddow.shadowBlurRadius, color: (dropShaddow.shadowColor as! UIColor).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            doubleRingWithArrowPath.addClip()
            let doubleRingWithArrowBounds = doubleRingWithArrowPath.cgPath.boundingBoxOfPath
            context.drawLinearGradient(arrowGradient,
                start: CGPoint(x: doubleRingWithArrowBounds.midX, y: doubleRingWithArrowBounds.minY),
                end: CGPoint(x: doubleRingWithArrowBounds.midX, y: doubleRingWithArrowBounds.maxY),
                options: CGGradientDrawingOptions())
            context.endTransparencyLayer()

            ////// doubleRingWithArrow Inner Shadow
            context.saveGState()
            context.clip(to: doubleRingWithArrowPath.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0)
            context.setAlpha((innerShaddow.shadowColor as! UIColor).cgColor.alpha)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let doubleRingWithArrowOpaqueShadow = (innerShaddow.shadowColor as! UIColor).withAlphaComponent(1)
            context.setShadow(offset: innerShaddow.shadowOffset, blur: innerShaddow.shadowBlurRadius, color: doubleRingWithArrowOpaqueShadow.cgColor)
            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            doubleRingWithArrowOpaqueShadow.setFill()
            doubleRingWithArrowPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            context.restoreGState()

            context.restoreGState()


            context.restoreGState()
        }


        if (isArrowVisible) {
            //// ringWithArrow Drawing
            context.saveGState()
            context.translateBy(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.52779 * frame.height)
            context.rotate(by: -angle * CGFloat(Double.pi) / 180)

            let ringWithArrowPath = UIBezierPath()
            ringWithArrowPath.move(to: CGPoint(x: 0, y: -51.16))
            ringWithArrowPath.addCurve(to: CGPoint(x: -23.51, y: -45.43), controlPoint1: CGPoint(x: -8.48, y: -51.16), controlPoint2: CGPoint(x: -16.47, y: -49.09))
            ringWithArrowPath.addCurve(to: CGPoint(x: -51.09, y: 0), controlPoint1: CGPoint(x: -39.89, y: -36.91), controlPoint2: CGPoint(x: -51.09, y: -19.77))
            ringWithArrowPath.addCurve(to: CGPoint(x: -0, y: 51.16), controlPoint1: CGPoint(x: -51.09, y: 28.26), controlPoint2: CGPoint(x: -28.21, y: 51.16))
            ringWithArrowPath.addCurve(to: CGPoint(x: 51.09, y: 0), controlPoint1: CGPoint(x: 28.21, y: 51.16), controlPoint2: CGPoint(x: 51.09, y: 28.26))
            ringWithArrowPath.addCurve(to: CGPoint(x: 0, y: -51.16), controlPoint1: CGPoint(x: 51.09, y: -28.26), controlPoint2: CGPoint(x: 28.21, y: -51.16))
            ringWithArrowPath.close()
            ringWithArrowPath.move(to: CGPoint(x: 0, y: -65.92))
            ringWithArrowPath.addCurve(to: CGPoint(x: 7.57, y: -55.57), controlPoint1: CGPoint(x: 0, y: -65.92), controlPoint2: CGPoint(x: 3.38, y: -61.3))
            ringWithArrowPath.addCurve(to: CGPoint(x: 56, y: 0), controlPoint1: CGPoint(x: 34.92, y: -51.87), controlPoint2: CGPoint(x: 56, y: -28.4))
            ringWithArrowPath.addCurve(to: CGPoint(x: -0, y: 56.08), controlPoint1: CGPoint(x: 56, y: 30.97), controlPoint2: CGPoint(x: 30.93, y: 56.08))
            ringWithArrowPath.addCurve(to: CGPoint(x: -56, y: 0), controlPoint1: CGPoint(x: -30.93, y: 56.08), controlPoint2: CGPoint(x: -56, y: 30.97))
            ringWithArrowPath.addCurve(to: CGPoint(x: -27.74, y: -48.73), controlPoint1: CGPoint(x: -56, y: -20.87), controlPoint2: CGPoint(x: -44.62, y: -39.07))
            ringWithArrowPath.addCurve(to: CGPoint(x: -7.57, y: -55.57), controlPoint1: CGPoint(x: -21.64, y: -52.22), controlPoint2: CGPoint(x: -14.82, y: -54.59))
            ringWithArrowPath.addCurve(to: CGPoint(x: 0, y: -65.92), controlPoint1: CGPoint(x: -3.38, y: -61.3), controlPoint2: CGPoint(x: 0, y: -65.92))
            ringWithArrowPath.close()
            context.saveGState()
            context.setShadow(offset: dropShaddow.shadowOffset, blur: dropShaddow.shadowBlurRadius, color: (dropShaddow.shadowColor as! UIColor).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            ringWithArrowPath.addClip()
            let ringWithArrowBounds = ringWithArrowPath.cgPath.boundingBoxOfPath
            context.drawLinearGradient(arrowGradient,
                start: CGPoint(x: ringWithArrowBounds.midX, y: ringWithArrowBounds.minY),
                end: CGPoint(x: ringWithArrowBounds.midX, y: ringWithArrowBounds.maxY),
                options: CGGradientDrawingOptions())
            context.endTransparencyLayer()

            ////// ringWithArrow Inner Shadow
            context.saveGState()
            context.clip(to: ringWithArrowPath.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0)
            context.setAlpha((innerShaddow.shadowColor as! UIColor).cgColor.alpha)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let ringWithArrowOpaqueShadow = (innerShaddow.shadowColor as! UIColor).withAlphaComponent(1)
            context.setShadow(offset: innerShaddow.shadowOffset, blur: innerShaddow.shadowBlurRadius, color: ringWithArrowOpaqueShadow.cgColor)
            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            ringWithArrowOpaqueShadow.setFill()
            ringWithArrowPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            context.restoreGState()

            context.restoreGState()


            context.restoreGState()
        }


        if (arrowNotVisible) {
            //// ring Drawing
            context.saveGState()
            context.translateBy(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.52821 * frame.height)

            let ringPath = UIBezierPath()
            ringPath.move(to: CGPoint(x: 0, y: -52))
            ringPath.addCurve(to: CGPoint(x: -23.93, y: -46.18), controlPoint1: CGPoint(x: -8.63, y: -52), controlPoint2: CGPoint(x: -16.77, y: -49.9))
            ringPath.addCurve(to: CGPoint(x: -52, y: 0), controlPoint1: CGPoint(x: -40.61, y: -37.52), controlPoint2: CGPoint(x: -52, y: -20.09))
            ringPath.addCurve(to: CGPoint(x: -0, y: 52), controlPoint1: CGPoint(x: -52, y: 28.72), controlPoint2: CGPoint(x: -28.72, y: 52))
            ringPath.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 28.72, y: 52), controlPoint2: CGPoint(x: 52, y: 28.72))
            ringPath.addCurve(to: CGPoint(x: 0, y: -52), controlPoint1: CGPoint(x: 52, y: -28.72), controlPoint2: CGPoint(x: 28.72, y: -52))
            ringPath.close()
            ringPath.move(to: CGPoint(x: 57, y: 0))
            ringPath.addCurve(to: CGPoint(x: -0, y: 57), controlPoint1: CGPoint(x: 57, y: 31.48), controlPoint2: CGPoint(x: 31.48, y: 57))
            ringPath.addCurve(to: CGPoint(x: -57, y: 0), controlPoint1: CGPoint(x: -31.48, y: 57), controlPoint2: CGPoint(x: -57, y: 31.48))
            ringPath.addCurve(to: CGPoint(x: -28.23, y: -49.53), controlPoint1: CGPoint(x: -57, y: -21.21), controlPoint2: CGPoint(x: -45.42, y: -39.71))
            ringPath.addCurve(to: CGPoint(x: 0, y: -57), controlPoint1: CGPoint(x: -19.91, y: -54.28), controlPoint2: CGPoint(x: -10.27, y: -57))
            ringPath.addCurve(to: CGPoint(x: 57, y: 0), controlPoint1: CGPoint(x: 31.48, y: -57), controlPoint2: CGPoint(x: 57, y: -31.48))
            ringPath.close()
            context.saveGState()
            context.setShadow(offset: dropShaddow.shadowOffset, blur: dropShaddow.shadowBlurRadius, color: (dropShaddow.shadowColor as! UIColor).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            ringPath.addClip()
            let ringBounds = ringPath.cgPath.boundingBoxOfPath
            context.drawLinearGradient(arrowGradient,
                start: CGPoint(x: ringBounds.midX, y: ringBounds.minY),
                end: CGPoint(x: ringBounds.midX, y: ringBounds.maxY),
                options: CGGradientDrawingOptions())
            context.endTransparencyLayer()

            ////// ring Inner Shadow
            context.saveGState()
            context.clip(to: ringPath.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0)
            context.setAlpha((innerShaddow.shadowColor as! UIColor).cgColor.alpha)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let ringOpaqueShadow = (innerShaddow.shadowColor as! UIColor).withAlphaComponent(1)
            context.setShadow(offset: innerShaddow.shadowOffset, blur: innerShaddow.shadowBlurRadius, color: ringOpaqueShadow.cgColor)
            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            ringOpaqueShadow.setFill()
            ringPath.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            context.restoreGState()

            context.restoreGState()


            context.restoreGState()


            //// ring 2 Drawing
            context.saveGState()
            context.translateBy(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.52821 * frame.height)

            let ring2Path = UIBezierPath()
            ring2Path.move(to: CGPoint(x: 0, y: -52))
            ring2Path.addCurve(to: CGPoint(x: -23.93, y: -46.18), controlPoint1: CGPoint(x: -8.63, y: -52), controlPoint2: CGPoint(x: -16.77, y: -49.9))
            ring2Path.addCurve(to: CGPoint(x: -52, y: 0), controlPoint1: CGPoint(x: -40.61, y: -37.52), controlPoint2: CGPoint(x: -52, y: -20.09))
            ring2Path.addCurve(to: CGPoint(x: -0, y: 52), controlPoint1: CGPoint(x: -52, y: 28.72), controlPoint2: CGPoint(x: -28.72, y: 52))
            ring2Path.addCurve(to: CGPoint(x: 52, y: 0), controlPoint1: CGPoint(x: 28.72, y: 52), controlPoint2: CGPoint(x: 52, y: 28.72))
            ring2Path.addCurve(to: CGPoint(x: 0, y: -52), controlPoint1: CGPoint(x: 52, y: -28.72), controlPoint2: CGPoint(x: 28.72, y: -52))
            ring2Path.close()
            ring2Path.move(to: CGPoint(x: 57, y: 0))
            ring2Path.addCurve(to: CGPoint(x: -0, y: 57), controlPoint1: CGPoint(x: 57, y: 31.48), controlPoint2: CGPoint(x: 31.48, y: 57))
            ring2Path.addCurve(to: CGPoint(x: -57, y: 0), controlPoint1: CGPoint(x: -31.48, y: 57), controlPoint2: CGPoint(x: -57, y: 31.48))
            ring2Path.addCurve(to: CGPoint(x: -28.23, y: -49.53), controlPoint1: CGPoint(x: -57, y: -21.21), controlPoint2: CGPoint(x: -45.42, y: -39.71))
            ring2Path.addCurve(to: CGPoint(x: 0, y: -57), controlPoint1: CGPoint(x: -19.91, y: -54.28), controlPoint2: CGPoint(x: -10.27, y: -57))
            ring2Path.addCurve(to: CGPoint(x: 57, y: 0), controlPoint1: CGPoint(x: 31.48, y: -57), controlPoint2: CGPoint(x: 57, y: -31.48))
            ring2Path.close()
            context.saveGState()
            context.setShadow(offset: dropShaddow.shadowOffset, blur: dropShaddow.shadowBlurRadius, color: (dropShaddow.shadowColor as! UIColor).cgColor)
            arrowTintHighlightColor.setFill()
            ring2Path.fill()

            ////// ring 2 Inner Shadow
            context.saveGState()
            context.clip(to: ring2Path.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0)
            context.setAlpha((innerShaddow.shadowColor as! UIColor).cgColor.alpha)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let ring2OpaqueShadow = (innerShaddow.shadowColor as! UIColor).withAlphaComponent(1)
            context.setShadow(offset: innerShaddow.shadowOffset, blur: innerShaddow.shadowBlurRadius, color: ring2OpaqueShadow.cgColor)
            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            ring2OpaqueShadow.setFill()
            ring2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            context.restoreGState()

            context.restoreGState()


            context.restoreGState()
        }
    }

    @objc open class func drawTextBlock(frame: CGRect = CGRect(x: 0, y: 0, width: 156, height: 195), arrowTintColor: UIColor = UIColor(red: 1.000, green: 0.067, blue: 0.310, alpha: 1.000), sgvText: String = "High", bg_delta: String = "+00 mg/dl", textSizeForSgv: CGFloat = 39, textSizeForDelta: CGFloat = 27) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let arrowTintHighlightColor = arrowTintColor.colorWithHighlight(0.1)
        let arrowTintShadowColorDarker = arrowTintColor.colorWithShadow(0.6)

        //// Shadow Declarations
        let dropShaddow = NSShadow()
        dropShaddow.shadowColor = arrowTintShadowColorDarker.withAlphaComponent(0.7 * arrowTintShadowColorDarker.cgColor.alpha)
        dropShaddow.shadowOffset = CGSize(width: 0.1, height: 0.6)
        dropShaddow.shadowBlurRadius = 1


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + floor((frame.width - 90) * 0.50000 + 0.5), y: frame.minY + floor((frame.height - 67) * 0.54687 + 0.5), width: 90, height: 67)


        //// Group
        context.saveGState()
        context.setShadow(offset: dropShaddow.shadowOffset, blur: dropShaddow.shadowBlurRadius, color: (dropShaddow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// sgvLabel Drawing
        let sgvLabelRect = CGRect(x: group.minX, y: group.minY, width: 90, height: 54)
        let sgvLabelStyle = NSMutableParagraphStyle()
        sgvLabelStyle.alignment = .center

        let sgvLabelFontAttributes = [NSAttributedString.Key.font: UIFont.systemFont(ofSize: textSizeForSgv), NSAttributedString.Key.foregroundColor: arrowTintHighlightColor, NSAttributedString.Key.paragraphStyle: sgvLabelStyle]

        NSString(string: sgvText).draw(in: sgvLabelRect, withAttributes: sgvLabelFontAttributes)


        //// deltaLabel Drawing
        let deltaLabelRect = CGRect(x: group.minX, y: group.minY + 46, width: 90, height: 21)
        let deltaLabelStyle = NSMutableParagraphStyle()
        deltaLabelStyle.alignment = .center

        let deltaLabelFontAttributes = [NSAttributedString.Key.font: UIFont.systemFont(ofSize: textSizeForDelta), NSAttributedString.Key.foregroundColor: arrowTintHighlightColor, NSAttributedString.Key.paragraphStyle: deltaLabelStyle]

        let deltaLabelTextHeight: CGFloat = NSString(string: bg_delta).boundingRect(with: CGSize(width: deltaLabelRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: deltaLabelFontAttributes, context: nil).size.height
        context.saveGState()
        context.clip(to: deltaLabelRect)
        NSString(string: bg_delta).draw(in: CGRect(x: deltaLabelRect.minX, y: deltaLabelRect.minY + (deltaLabelRect.height - deltaLabelTextHeight) / 2, width: deltaLabelRect.width, height: deltaLabelTextHeight), withAttributes: deltaLabelFontAttributes)
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
    }

    @objc open class func drawWatchFaceComposite(frame: CGRect = CGRect(x: 0, y: 0, width: 156, height: 195), arrowTintColor: UIColor = UIColor(red: 1.000, green: 0.067, blue: 0.310, alpha: 1.000), angle: CGFloat = 0, isArrowVisible: Bool = true, doubleUp: Bool = true, sgvText: String = "High", bg_delta: String = "+00 mg/dl", isUncomputable: Bool = true, computeAnimation: CGFloat = 0, textSizeForSgv: CGFloat = 39, textSizeForDelta: CGFloat = 27) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// compassControl Drawing
        let compassControlRect = CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5))
        context.saveGState()
        UIRectClip(compassControlRect)
        context.translateBy(x: compassControlRect.origin.x, y: compassControlRect.origin.y)

        NSAssetKit.drawWatchFaceOnly(CGRect(x: 0, y: 0, width: compassControlRect.size.width, height: compassControlRect.size.height), arrowTintColor: arrowTintColor, angle: angle, isArrowVisible: isArrowVisible, doubleUp: doubleUp)
        context.restoreGState()


        if (isUncomputable) {
            //// computeCircle Drawing
            let computeCircleRect = CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5))
            context.saveGState()
            UIRectClip(computeCircleRect)
            context.translateBy(x: computeCircleRect.origin.x, y: computeCircleRect.origin.y)

            NSAssetKit.drawUncomputedCircle(CGRect(x: 0, y: 0, width: computeCircleRect.size.width, height: computeCircleRect.size.height), arrowTintColor: arrowTintColor, isUncomputable: isUncomputable, computeAnimation: computeAnimation)
            context.restoreGState()
        }


        //// textArea Drawing
        let textAreaRect = CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5))
        context.saveGState()
        UIRectClip(textAreaRect)
        context.translateBy(x: textAreaRect.origin.x, y: textAreaRect.origin.y)

        NSAssetKit.drawTextBlock(frame: CGRect(x: 0, y: 0, width: textAreaRect.size.width, height: textAreaRect.size.height), arrowTintColor: arrowTintColor, sgvText: sgvText, bg_delta: bg_delta, textSizeForSgv: textSizeForSgv, textSizeForDelta: textSizeForDelta)
        context.restoreGState()
    }

    @objc open class func drawUncomputedCircle(_ frame: CGRect = CGRect(x: 0, y: 0, width: 156, height: 195), arrowTintColor: UIColor = UIColor(red: 1.000, green: 0.067, blue: 0.310, alpha: 1.000), isUncomputable: Bool = true, computeAnimation: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let arrowTintShadowColor = arrowTintColor.colorWithShadow(0.2)
        let arrowTintShadowColorDarker = arrowTintColor.colorWithShadow(0.6)

        //// Shadow Declarations
        let dropShaddow = NSShadow()
        dropShaddow.shadowColor = arrowTintShadowColorDarker.withAlphaComponent(0.7 * arrowTintShadowColorDarker.cgColor.alpha)
        dropShaddow.shadowOffset = CGSize(width: 0.1, height: 0.6)
        dropShaddow.shadowBlurRadius = 1

        if (isUncomputable) {
            //// uncomputableRing Drawing
            context.saveGState()
            context.translateBy(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.52821 * frame.height)
            context.rotate(by: -computeAnimation * CGFloat(Double.pi) / 180)

            let uncomputableRingPath = UIBezierPath(ovalIn: CGRect(x: -54, y: -54, width: 108, height: 108))
            context.saveGState()
            context.setShadow(offset: dropShaddow.shadowOffset, blur: dropShaddow.shadowBlurRadius, color: (dropShaddow.shadowColor as! UIColor).cgColor)
            arrowTintShadowColor.setStroke()
            uncomputableRingPath.lineWidth = 6.5
            context.saveGState()
            
            
            //CGContextSetLineDash(context, -2, [4, 6], 2)
            uncomputableRingPath.stroke()
            context.restoreGState()
            context.restoreGState()

            context.restoreGState()
        }
    }

    @objc open class func drawNightscoutLogo(logoFrame: CGRect = CGRect(x: 0, y: 0, width: 133, height: 173), logoTintColor: UIColor = UIColor(red: 0.300, green: 0.300, blue: 0.300, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Symbol Drawing
        let symbolRect = CGRect(x: logoFrame.minX + 7, y: logoFrame.minY + 7, width: logoFrame.width - 14, height: logoFrame.height - 14)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)
        context.scaleBy(x: symbolRect.size.width / 411, y: symbolRect.size.height / 565)

        NSAssetKit.drawLogoSource(logoTintColor: logoTintColor)
        context.restoreGState()
    }

    @objc open class func drawLogoSource(logoTintColor: UIColor = UIColor(red: 0.300, green: 0.300, blue: 0.300, alpha: 1.000)) {
        //// Color Declarations
        let logoHighlightColor = logoTintColor.colorWithHighlight(1)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 289.28, y: 24.48))
        bezierPath.addCurve(to: CGPoint(x: 346.48, y: 64.7), controlPoint1: CGPoint(x: 311.36, y: 34.93), controlPoint2: CGPoint(x: 330.37, y: 48.49))
        bezierPath.addCurve(to: CGPoint(x: 386.51, y: 122.21), controlPoint1: CGPoint(x: 362.58, y: 80.92), controlPoint2: CGPoint(x: 376.18, y: 99.9))
        bezierPath.addCurve(to: CGPoint(x: 405.09, y: 201.3), controlPoint1: CGPoint(x: 396.8, y: 144.45), controlPoint2: CGPoint(x: 404.03, y: 170.13))
        bezierPath.addCurve(to: CGPoint(x: 405.09, y: 215.32), controlPoint1: CGPoint(x: 405.09, y: 205.97), controlPoint2: CGPoint(x: 405.09, y: 210.64))
        bezierPath.addCurve(to: CGPoint(x: 382.23, y: 328.58), controlPoint1: CGPoint(x: 403.56, y: 258.85), controlPoint2: CGPoint(x: 394.19, y: 295.31))
        bezierPath.addCurve(to: CGPoint(x: 337.54, y: 419.79), controlPoint1: CGPoint(x: 370.29, y: 361.79), controlPoint2: CGPoint(x: 354.69, y: 391.53))
        bezierPath.addCurve(to: CGPoint(x: 280.58, y: 498.71), controlPoint1: CGPoint(x: 320.53, y: 447.81), controlPoint2: CGPoint(x: 301.08, y: 473.83))
        bezierPath.addCurve(to: CGPoint(x: 248.62, y: 534.65), controlPoint1: CGPoint(x: 270.45, y: 510.99), controlPoint2: CGPoint(x: 259.75, y: 522.95))
        bezierPath.addCurve(to: CGPoint(x: 231.21, y: 551.21), controlPoint1: CGPoint(x: 243.2, y: 540.3), controlPoint2: CGPoint(x: 237.96, y: 546.67))
        bezierPath.addCurve(to: CGPoint(x: 205.34, y: 559.17), controlPoint1: CGPoint(x: 224.52, y: 555.69), controlPoint2: CGPoint(x: 215.94, y: 559.17))
        bezierPath.addCurve(to: CGPoint(x: 179.64, y: 550.96), controlPoint1: CGPoint(x: 194.58, y: 559.17), controlPoint2: CGPoint(x: 186.32, y: 555.46))
        bezierPath.addCurve(to: CGPoint(x: 162.23, y: 534.4), controlPoint1: CGPoint(x: 172.83, y: 546.38), controlPoint2: CGPoint(x: 167.71, y: 540.03))
        bezierPath.addCurve(to: CGPoint(x: 146.01, y: 516.63), controlPoint1: CGPoint(x: 156.62, y: 528.64), controlPoint2: CGPoint(x: 151.31, y: 522.61))
        bezierPath.addCurve(to: CGPoint(x: 73.47, y: 419.46), controlPoint1: CGPoint(x: 119.43, y: 486.63), controlPoint2: CGPoint(x: 95.21, y: 454.47))
        bezierPath.addCurve(to: CGPoint(x: 28.78, y: 328.18), controlPoint1: CGPoint(x: 56.06, y: 391.42), controlPoint2: CGPoint(x: 40.8, y: 361.4))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 214.92), controlPoint1: CGPoint(x: 16.76, y: 294.98), controlPoint2: CGPoint(x: 7.53, y: 258.39))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 202.25), controlPoint1: CGPoint(x: 6, y: 210.7), controlPoint2: CGPoint(x: 6, y: 206.47))
        bezierPath.addCurve(to: CGPoint(x: 6.08, y: 202.1), controlPoint1: CGPoint(x: 6.05, y: 202.25), controlPoint2: CGPoint(x: 6.09, y: 202.19))
        bezierPath.addCurve(to: CGPoint(x: 24.43, y: 122.6), controlPoint1: CGPoint(x: 6.86, y: 170.61), controlPoint2: CGPoint(x: 14.2, y: 144.98))
        bezierPath.addCurve(to: CGPoint(x: 64.53, y: 64.94), controlPoint1: CGPoint(x: 34.7, y: 100.15), controlPoint2: CGPoint(x: 48.37, y: 81.21))
        bezierPath.addCurve(to: CGPoint(x: 115.84, y: 27.43), controlPoint1: CGPoint(x: 79.25, y: 50.12), controlPoint2: CGPoint(x: 96.16, y: 37.45))
        bezierPath.addCurve(to: CGPoint(x: 121.73, y: 24.55), controlPoint1: CGPoint(x: 117.78, y: 26.45), controlPoint2: CGPoint(x: 119.74, y: 25.49))
        bezierPath.addCurve(to: CGPoint(x: 200.68, y: 6), controlPoint1: CGPoint(x: 143.92, y: 14.14), controlPoint2: CGPoint(x: 169.59, y: 7.02))
        bezierPath.addLine(to: CGPoint(x: 210.48, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 289.28, y: 24.48), controlPoint1: CGPoint(x: 241.46, y: 7.12), controlPoint2: CGPoint(x: 267.12, y: 14))
        bezierPath.close()
        logoHighlightColor.setFill()
        bezierPath.fill()


        //// Group 6
        //// Bezier 33 Drawing
        let bezier33Path = UIBezierPath()
        bezier33Path.move(to: CGPoint(x: 176.55, y: 35.54))
        bezier33Path.addCurve(to: CGPoint(x: 155.22, y: 40.57), controlPoint1: CGPoint(x: 169.06, y: 36.77), controlPoint2: CGPoint(x: 161.93, y: 38.44))
        bezier33Path.addCurve(to: CGPoint(x: 64, y: 107.39), controlPoint1: CGPoint(x: 115.46, y: 53.15), controlPoint2: CGPoint(x: 85.56, y: 76.63))
        bezier33Path.addCurve(to: CGPoint(x: 45.58, y: 141.61), controlPoint1: CGPoint(x: 56.78, y: 117.69), controlPoint2: CGPoint(x: 50.54, y: 129.12))
        bezier33Path.addCurve(to: CGPoint(x: 34.8, y: 183.53), controlPoint1: CGPoint(x: 40.58, y: 154.26), controlPoint2: CGPoint(x: 36.81, y: 167.95))
        bezier33Path.addCurve(to: CGPoint(x: 34.89, y: 233.4), controlPoint1: CGPoint(x: 32.8, y: 199.25), controlPoint2: CGPoint(x: 33.3, y: 217.21))
        bezier33Path.addCurve(to: CGPoint(x: 42.67, y: 278.32), controlPoint1: CGPoint(x: 36.48, y: 249.43), controlPoint2: CGPoint(x: 39.16, y: 264.39))
        bezier33Path.addCurve(to: CGPoint(x: 88.97, y: 390.06), controlPoint1: CGPoint(x: 53.21, y: 320.12), controlPoint2: CGPoint(x: 69.73, y: 356.79))
        bezier33Path.addCurve(to: CGPoint(x: 154.42, y: 482.67), controlPoint1: CGPoint(x: 108.31, y: 423.52), controlPoint2: CGPoint(x: 130.43, y: 453.77))
        bezier33Path.addCurve(to: CGPoint(x: 166.66, y: 496.78), controlPoint1: CGPoint(x: 158.37, y: 487.45), controlPoint2: CGPoint(x: 162.55, y: 492.07))
        bezier33Path.addCurve(to: CGPoint(x: 192.05, y: 524.12), controlPoint1: CGPoint(x: 174.89, y: 506.21), controlPoint2: CGPoint(x: 183.17, y: 515.23))
        bezier33Path.addCurve(to: CGPoint(x: 199.17, y: 530.12), controlPoint1: CGPoint(x: 194.1, y: 526.15), controlPoint2: CGPoint(x: 196.3, y: 528.68))
        bezier33Path.addCurve(to: CGPoint(x: 210.05, y: 530.84), controlPoint1: CGPoint(x: 202.24, y: 531.63), controlPoint2: CGPoint(x: 206.68, y: 532.04))
        bezier33Path.addCurve(to: CGPoint(x: 217.75, y: 525.41), controlPoint1: CGPoint(x: 213.01, y: 529.78), controlPoint2: CGPoint(x: 215.42, y: 527.74))
        bezier33Path.addCurve(to: CGPoint(x: 236.96, y: 505.13), controlPoint1: CGPoint(x: 224.38, y: 518.78), controlPoint2: CGPoint(x: 230.85, y: 511.96))
        bezier33Path.addCurve(to: CGPoint(x: 306.06, y: 416.18), controlPoint1: CGPoint(x: 261.94, y: 477.31), controlPoint2: CGPoint(x: 285.44, y: 448.01))
        bezier33Path.addCurve(to: CGPoint(x: 358.77, y: 310.83), controlPoint1: CGPoint(x: 326.72, y: 384.26), controlPoint2: CGPoint(x: 345.27, y: 349.82))
        bezier33Path.addCurve(to: CGPoint(x: 370.35, y: 269.73), controlPoint1: CGPoint(x: 363.3, y: 297.75), controlPoint2: CGPoint(x: 367.28, y: 284.06))
        bezier33Path.addCurve(to: CGPoint(x: 377.57, y: 198.45), controlPoint1: CGPoint(x: 374.95, y: 248.39), controlPoint2: CGPoint(x: 378.38, y: 224.21))
        bezier33Path.addCurve(to: CGPoint(x: 374.98, y: 174.69), controlPoint1: CGPoint(x: 377.32, y: 190.29), controlPoint2: CGPoint(x: 376.25, y: 182.22))
        bezier33Path.addCurve(to: CGPoint(x: 362.49, y: 134.48), controlPoint1: CGPoint(x: 372.49, y: 159.94), controlPoint2: CGPoint(x: 367.91, y: 146.61))
        bezier33Path.addCurve(to: CGPoint(x: 342.79, y: 101.47), controlPoint1: CGPoint(x: 357.06, y: 122.29), controlPoint2: CGPoint(x: 350.31, y: 111.44))
        bezier33Path.addCurve(to: CGPoint(x: 285.95, y: 52.97), controlPoint1: CGPoint(x: 327.6, y: 81.35), controlPoint2: CGPoint(x: 309.03, y: 65.38))
        bezier33Path.addCurve(to: CGPoint(x: 247.83, y: 38.38), controlPoint1: CGPoint(x: 274.61, y: 46.88), controlPoint2: CGPoint(x: 261.93, y: 41.94))
        bezier33Path.addCurve(to: CGPoint(x: 200.47, y: 33.19), controlPoint1: CGPoint(x: 234.02, y: 34.9), controlPoint2: CGPoint(x: 217.75, y: 32.36))
        bezier33Path.addCurve(to: CGPoint(x: 176.55, y: 35.54), controlPoint1: CGPoint(x: 191.93, y: 33.6), controlPoint2: CGPoint(x: 184.08, y: 34.31))
        bezier33Path.close()
        bezier33Path.move(to: CGPoint(x: 200.56, y: 1))
        bezier33Path.addCurve(to: CGPoint(x: 210.6, y: 1), controlPoint1: CGPoint(x: 203.9, y: 1), controlPoint2: CGPoint(x: 207.26, y: 1))
        bezier33Path.addCurve(to: CGPoint(x: 291.38, y: 19.81), controlPoint1: CGPoint(x: 242.36, y: 2.14), controlPoint2: CGPoint(x: 268.66, y: 9.15))
        bezier33Path.addCurve(to: CGPoint(x: 350.01, y: 60.76), controlPoint1: CGPoint(x: 314.02, y: 30.45), controlPoint2: CGPoint(x: 333.5, y: 44.26))
        bezier33Path.addCurve(to: CGPoint(x: 391.04, y: 119.31), controlPoint1: CGPoint(x: 366.51, y: 77.27), controlPoint2: CGPoint(x: 380.46, y: 96.6))
        bezier33Path.addCurve(to: CGPoint(x: 410.09, y: 199.83), controlPoint1: CGPoint(x: 401.59, y: 141.96), controlPoint2: CGPoint(x: 409, y: 168.1))
        bezier33Path.addCurve(to: CGPoint(x: 410.09, y: 214.1), controlPoint1: CGPoint(x: 410.09, y: 204.59), controlPoint2: CGPoint(x: 410.09, y: 209.34))
        bezier33Path.addCurve(to: CGPoint(x: 386.66, y: 329.41), controlPoint1: CGPoint(x: 408.52, y: 258.42), controlPoint2: CGPoint(x: 398.92, y: 295.54))
        bezier33Path.addCurve(to: CGPoint(x: 340.85, y: 422.27), controlPoint1: CGPoint(x: 374.42, y: 363.22), controlPoint2: CGPoint(x: 358.43, y: 393.5))
        bezier33Path.addCurve(to: CGPoint(x: 282.46, y: 502.62), controlPoint1: CGPoint(x: 323.41, y: 450.79), controlPoint2: CGPoint(x: 303.48, y: 477.29))
        bezier33Path.addCurve(to: CGPoint(x: 249.7, y: 539.21), controlPoint1: CGPoint(x: 272.08, y: 515.12), controlPoint2: CGPoint(x: 261.11, y: 527.3))
        bezier33Path.addCurve(to: CGPoint(x: 231.86, y: 556.07), controlPoint1: CGPoint(x: 244.15, y: 544.96), controlPoint2: CGPoint(x: 238.78, y: 551.45))
        bezier33Path.addCurve(to: CGPoint(x: 205.34, y: 564.17), controlPoint1: CGPoint(x: 225, y: 560.63), controlPoint2: CGPoint(x: 216.2, y: 564.17))
        bezier33Path.addCurve(to: CGPoint(x: 178.99, y: 555.82), controlPoint1: CGPoint(x: 194.3, y: 564.17), controlPoint2: CGPoint(x: 185.84, y: 560.39))
        bezier33Path.addCurve(to: CGPoint(x: 161.15, y: 538.95), controlPoint1: CGPoint(x: 172.01, y: 551.15), controlPoint2: CGPoint(x: 166.76, y: 544.68))
        bezier33Path.addCurve(to: CGPoint(x: 144.52, y: 520.86), controlPoint1: CGPoint(x: 155.4, y: 533.09), controlPoint2: CGPoint(x: 149.95, y: 526.95))
        bezier33Path.addCurve(to: CGPoint(x: 70.16, y: 421.94), controlPoint1: CGPoint(x: 117.27, y: 490.32), controlPoint2: CGPoint(x: 92.45, y: 457.58))
        bezier33Path.addCurve(to: CGPoint(x: 24.35, y: 329), controlPoint1: CGPoint(x: 52.32, y: 393.39), controlPoint2: CGPoint(x: 36.67, y: 362.82))
        bezier33Path.addCurve(to: CGPoint(x: 1, y: 213.7), controlPoint1: CGPoint(x: 12.03, y: 295.2), controlPoint2: CGPoint(x: 2.57, y: 257.96))
        bezier33Path.addCurve(to: CGPoint(x: 1, y: 200.8), controlPoint1: CGPoint(x: 1, y: 209.4), controlPoint2: CGPoint(x: 1, y: 205.09))
        bezier33Path.addCurve(to: CGPoint(x: 1.08, y: 200.64), controlPoint1: CGPoint(x: 1.05, y: 200.79), controlPoint2: CGPoint(x: 1.09, y: 200.74))
        bezier33Path.addCurve(to: CGPoint(x: 19.89, y: 119.71), controlPoint1: CGPoint(x: 1.88, y: 168.58), controlPoint2: CGPoint(x: 9.41, y: 142.49))
        bezier33Path.addCurve(to: CGPoint(x: 61, y: 61.01), controlPoint1: CGPoint(x: 30.42, y: 96.85), controlPoint2: CGPoint(x: 44.43, y: 77.57))
        bezier33Path.addCurve(to: CGPoint(x: 119.63, y: 19.89), controlPoint1: CGPoint(x: 77.57, y: 44.44), controlPoint2: CGPoint(x: 96.85, y: 30.51))
        bezier33Path.addCurve(to: CGPoint(x: 200.56, y: 1), controlPoint1: CGPoint(x: 142.38, y: 9.29), controlPoint2: CGPoint(x: 168.68, y: 2.04))
        bezier33Path.close()
        bezier33Path.usesEvenOddFillRule = true;

        logoTintColor.setFill()
        bezier33Path.fill()


        //// Bezier 34 Drawing
        let bezier34Path = UIBezierPath()
        bezier34Path.move(to: CGPoint(x: 320.65, y: 125.06))
        bezier34Path.addCurve(to: CGPoint(x: 267.94, y: 119.23), controlPoint1: CGPoint(x: 307.08, y: 119.26), controlPoint2: CGPoint(x: 286.68, y: 116.16))
        bezier34Path.addCurve(to: CGPoint(x: 205.58, y: 158.31), controlPoint1: CGPoint(x: 239.23, y: 123.93), controlPoint2: CGPoint(x: 219.23, y: 138.6))
        bezier34Path.addCurve(to: CGPoint(x: 159.37, y: 123.29), controlPoint1: CGPoint(x: 194.66, y: 142.54), controlPoint2: CGPoint(x: 179.62, y: 129.99))
        bezier34Path.addCurve(to: CGPoint(x: 143.06, y: 119.23), controlPoint1: CGPoint(x: 154.32, y: 121.61), controlPoint2: CGPoint(x: 148.92, y: 120.11))
        bezier34Path.addCurve(to: CGPoint(x: 90.44, y: 125.06), controlPoint1: CGPoint(x: 124.46, y: 116.42), controlPoint2: CGPoint(x: 104.04, y: 119.06))
        bezier34Path.addCurve(to: CGPoint(x: 91.33, y: 123.61), controlPoint1: CGPoint(x: 90.39, y: 124.6), controlPoint2: CGPoint(x: 90.96, y: 124.12))
        bezier34Path.addCurve(to: CGPoint(x: 134.63, y: 84.19), controlPoint1: CGPoint(x: 102.88, y: 107.71), controlPoint2: CGPoint(x: 117.22, y: 94.38))
        bezier34Path.addCurve(to: CGPoint(x: 200.8, y: 65.06), controlPoint1: CGPoint(x: 152.75, y: 73.6), controlPoint2: CGPoint(x: 173.57, y: 66.33))
        bezier34Path.addCurve(to: CGPoint(x: 241.42, y: 69.6), controlPoint1: CGPoint(x: 215.82, y: 64.36), controlPoint2: CGPoint(x: 229.93, y: 66.55))
        bezier34Path.addCurve(to: CGPoint(x: 299.81, y: 101.23), controlPoint1: CGPoint(x: 265.31, y: 75.95), controlPoint2: CGPoint(x: 283.86, y: 87.12))
        bezier34Path.addCurve(to: CGPoint(x: 320.33, y: 124.33), controlPoint1: CGPoint(x: 307.34, y: 107.9), controlPoint2: CGPoint(x: 314.5, y: 115.89))
        bezier34Path.addCurve(to: CGPoint(x: 320.65, y: 125.06), controlPoint1: CGPoint(x: 320.45, y: 124.51), controlPoint2: CGPoint(x: 320.83, y: 124.76))
        bezier34Path.close()
        bezier34Path.usesEvenOddFillRule = true;

        logoTintColor.setFill()
        bezier34Path.fill()


        //// Bezier 35 Drawing
        let bezier35Path = UIBezierPath()
        bezier35Path.move(to: CGPoint(x: 244.18, y: 171.69))
        bezier35Path.addCurve(to: CGPoint(x: 233.47, y: 188.15), controlPoint1: CGPoint(x: 239.62, y: 176.34), controlPoint2: CGPoint(x: 236.17, y: 181.53))
        bezier35Path.addCurve(to: CGPoint(x: 229.42, y: 211.27), controlPoint1: CGPoint(x: 230.97, y: 194.32), controlPoint2: CGPoint(x: 229.03, y: 202.41))
        bezier35Path.addCurve(to: CGPoint(x: 235.01, y: 232.83), controlPoint1: CGPoint(x: 229.79, y: 219.62), controlPoint2: CGPoint(x: 231.96, y: 226.76))
        bezier35Path.addCurve(to: CGPoint(x: 246.53, y: 248.48), controlPoint1: CGPoint(x: 238.1, y: 238.95), controlPoint2: CGPoint(x: 241.8, y: 244.08))
        bezier35Path.addCurve(to: CGPoint(x: 286.19, y: 263.25), controlPoint1: CGPoint(x: 255.54, y: 256.85), controlPoint2: CGPoint(x: 268.42, y: 263.94))
        bezier35Path.addCurve(to: CGPoint(x: 307.83, y: 257.72), controlPoint1: CGPoint(x: 294.55, y: 262.9), controlPoint2: CGPoint(x: 301.76, y: 260.66))
        bezier35Path.addCurve(to: CGPoint(x: 323.41, y: 246.13), controlPoint1: CGPoint(x: 313.93, y: 254.8), controlPoint2: CGPoint(x: 319.11, y: 250.75))
        bezier35Path.addCurve(to: CGPoint(x: 334.11, y: 229.68), controlPoint1: CGPoint(x: 327.73, y: 241.46), controlPoint2: CGPoint(x: 331.42, y: 236.15))
        bezier35Path.addCurve(to: CGPoint(x: 338.17, y: 206.56), controlPoint1: CGPoint(x: 336.75, y: 223.3), controlPoint2: CGPoint(x: 338.56, y: 215.51))
        bezier35Path.addCurve(to: CGPoint(x: 332.65, y: 184.9), controlPoint1: CGPoint(x: 337.81, y: 198.38), controlPoint2: CGPoint(x: 335.64, y: 190.87))
        bezier35Path.addCurve(to: CGPoint(x: 304.6, y: 158.64), controlPoint1: CGPoint(x: 326.68, y: 173.04), controlPoint2: CGPoint(x: 317.32, y: 163.9))
        bezier35Path.addCurve(to: CGPoint(x: 281.4, y: 154.58), controlPoint1: CGPoint(x: 298.2, y: 155.99), controlPoint2: CGPoint(x: 290.1, y: 154.17))
        bezier35Path.addCurve(to: CGPoint(x: 244.18, y: 171.69), controlPoint1: CGPoint(x: 264.21, y: 155.4), controlPoint2: CGPoint(x: 253.07, y: 162.62))
        bezier35Path.close()
        bezier35Path.move(to: CGPoint(x: 103.25, y: 160.1))
        bezier35Path.addCurve(to: CGPoint(x: 87.68, y: 171.69), controlPoint1: CGPoint(x: 97.15, y: 163), controlPoint2: CGPoint(x: 91.99, y: 167.06))
        bezier35Path.addCurve(to: CGPoint(x: 76.98, y: 188.15), controlPoint1: CGPoint(x: 83.23, y: 176.48), controlPoint2: CGPoint(x: 79.7, y: 181.6))
        bezier35Path.addCurve(to: CGPoint(x: 72.99, y: 211.27), controlPoint1: CGPoint(x: 74.34, y: 194.48), controlPoint2: CGPoint(x: 72.6, y: 202.57))
        bezier35Path.addCurve(to: CGPoint(x: 90.11, y: 248.48), controlPoint1: CGPoint(x: 73.77, y: 228.18), controlPoint2: CGPoint(x: 80.96, y: 239.52))
        bezier35Path.addCurve(to: CGPoint(x: 106.56, y: 259.18), controlPoint1: CGPoint(x: 94.62, y: 252.9), controlPoint2: CGPoint(x: 100.13, y: 256.54))
        bezier35Path.addCurve(to: CGPoint(x: 129.77, y: 263.25), controlPoint1: CGPoint(x: 113.06, y: 261.86), controlPoint2: CGPoint(x: 120.96, y: 263.59))
        bezier35Path.addCurve(to: CGPoint(x: 151.33, y: 257.64), controlPoint1: CGPoint(x: 138.11, y: 262.9), controlPoint2: CGPoint(x: 145.33, y: 260.66))
        bezier35Path.addCurve(to: CGPoint(x: 166.99, y: 246.13), controlPoint1: CGPoint(x: 157.41, y: 254.59), controlPoint2: CGPoint(x: 162.7, y: 250.81))
        bezier35Path.addCurve(to: CGPoint(x: 181.66, y: 206.56), controlPoint1: CGPoint(x: 175.62, y: 236.7), controlPoint2: CGPoint(x: 182.15, y: 224.43))
        bezier35Path.addCurve(to: CGPoint(x: 176.15, y: 184.9), controlPoint1: CGPoint(x: 181.44, y: 198.47), controlPoint2: CGPoint(x: 179.05, y: 190.9))
        bezier35Path.addCurve(to: CGPoint(x: 164.56, y: 169.35), controlPoint1: CGPoint(x: 173.13, y: 178.68), controlPoint2: CGPoint(x: 169.41, y: 173.77))
        bezier35Path.addCurve(to: CGPoint(x: 124.89, y: 154.58), controlPoint1: CGPoint(x: 155.43, y: 161.03), controlPoint2: CGPoint(x: 142.72, y: 153.73))
        bezier35Path.addCurve(to: CGPoint(x: 103.25, y: 160.1), controlPoint1: CGPoint(x: 116.32, y: 154.99), controlPoint2: CGPoint(x: 109.38, y: 157.17))
        bezier35Path.close()
        bezier35Path.move(to: CGPoint(x: 124.58, y: 147.85))
        bezier35Path.addCurve(to: CGPoint(x: 156.85, y: 154.58), controlPoint1: CGPoint(x: 137.06, y: 147.26), controlPoint2: CGPoint(x: 148.03, y: 150.15))
        bezier35Path.addCurve(to: CGPoint(x: 177.85, y: 172.51), controlPoint1: CGPoint(x: 165.32, y: 158.84), controlPoint2: CGPoint(x: 172.45, y: 165.07))
        bezier35Path.addCurve(to: CGPoint(x: 189.04, y: 200.31), controlPoint1: CGPoint(x: 183.36, y: 180.1), controlPoint2: CGPoint(x: 187.31, y: 188.98))
        bezier35Path.addCurve(to: CGPoint(x: 189.93, y: 218.88), controlPoint1: CGPoint(x: 189.92, y: 206.09), controlPoint2: CGPoint(x: 189.93, y: 212.28))
        bezier35Path.addCurve(to: CGPoint(x: 189.93, y: 277.36), controlPoint1: CGPoint(x: 189.93, y: 238.04), controlPoint2: CGPoint(x: 189.93, y: 258.42))
        bezier35Path.addCurve(to: CGPoint(x: 190.18, y: 286.67), controlPoint1: CGPoint(x: 189.93, y: 280.56), controlPoint2: CGPoint(x: 189.45, y: 284.2))
        bezier35Path.addCurve(to: CGPoint(x: 195.69, y: 290.89), controlPoint1: CGPoint(x: 190.87, y: 289.04), controlPoint2: CGPoint(x: 192.54, y: 290.81))
        bezier35Path.addCurve(to: CGPoint(x: 215.07, y: 290.97), controlPoint1: CGPoint(x: 201.71, y: 291.06), controlPoint2: CGPoint(x: 208.22, y: 291.02))
        bezier35Path.addCurve(to: CGPoint(x: 220.9, y: 287), controlPoint1: CGPoint(x: 218.18, y: 290.95), controlPoint2: CGPoint(x: 220.11, y: 289.52))
        bezier35Path.addCurve(to: CGPoint(x: 221.24, y: 277.6), controlPoint1: CGPoint(x: 221.65, y: 284.64), controlPoint2: CGPoint(x: 221.24, y: 280.84))
        bezier35Path.addCurve(to: CGPoint(x: 221.32, y: 219.28), controlPoint1: CGPoint(x: 221.24, y: 258.14), controlPoint2: CGPoint(x: 221.01, y: 238.73))
        bezier35Path.addCurve(to: CGPoint(x: 222.04, y: 200.64), controlPoint1: CGPoint(x: 221.42, y: 212.47), controlPoint2: CGPoint(x: 221.17, y: 206.48))
        bezier35Path.addCurve(to: CGPoint(x: 242.48, y: 162.69), controlPoint1: CGPoint(x: 224.53, y: 184.21), controlPoint2: CGPoint(x: 232.07, y: 171.61))
        bezier35Path.addCurve(to: CGPoint(x: 268.51, y: 149.72), controlPoint1: CGPoint(x: 249.14, y: 156.98), controlPoint2: CGPoint(x: 258.29, y: 152.03))
        bezier35Path.addCurve(to: CGPoint(x: 286.19, y: 148.09), controlPoint1: CGPoint(x: 273.72, y: 148.54), controlPoint2: CGPoint(x: 279.82, y: 147.8))
        bezier35Path.addCurve(to: CGPoint(x: 302.97, y: 150.76), controlPoint1: CGPoint(x: 292.45, y: 148.39), controlPoint2: CGPoint(x: 297.83, y: 149.22))
        bezier35Path.addCurve(to: CGPoint(x: 327.62, y: 165.13), controlPoint1: CGPoint(x: 312.87, y: 153.75), controlPoint2: CGPoint(x: 321.1, y: 158.6))
        bezier35Path.addCurve(to: CGPoint(x: 346.02, y: 205.09), controlPoint1: CGPoint(x: 337.38, y: 174.88), controlPoint2: CGPoint(x: 344.47, y: 187.29))
        bezier35Path.addCurve(to: CGPoint(x: 345.22, y: 223.26), controlPoint1: CGPoint(x: 346.55, y: 211.01), controlPoint2: CGPoint(x: 345.96, y: 217.34))
        bezier35Path.addCurve(to: CGPoint(x: 337.6, y: 254.58), controlPoint1: CGPoint(x: 343.77, y: 234.78), controlPoint2: CGPoint(x: 341, y: 245.17))
        bezier35Path.addCurve(to: CGPoint(x: 307.68, y: 302.57), controlPoint1: CGPoint(x: 330.75, y: 273.5), controlPoint2: CGPoint(x: 320.22, y: 288.99))
        bezier35Path.addCurve(to: CGPoint(x: 261.94, y: 334.76), controlPoint1: CGPoint(x: 295.37, y: 315.9), controlPoint2: CGPoint(x: 279.75, y: 326.98))
        bezier35Path.addCurve(to: CGPoint(x: 232.18, y: 344), controlPoint1: CGPoint(x: 252.95, y: 338.7), controlPoint2: CGPoint(x: 243.13, y: 341.91))
        bezier35Path.addCurve(to: CGPoint(x: 196.18, y: 346.29), controlPoint1: CGPoint(x: 221.17, y: 346.11), controlPoint2: CGPoint(x: 208.75, y: 347.12))
        bezier35Path.addCurve(to: CGPoint(x: 136.26, y: 328.29), controlPoint1: CGPoint(x: 172.24, y: 344.68), controlPoint2: CGPoint(x: 152.63, y: 337.72))
        bezier35Path.addCurve(to: CGPoint(x: 94.49, y: 292.1), controlPoint1: CGPoint(x: 119.85, y: 318.83), controlPoint2: CGPoint(x: 106.05, y: 306.88))
        bezier35Path.addCurve(to: CGPoint(x: 65.87, y: 223.26), controlPoint1: CGPoint(x: 80.16, y: 273.82), controlPoint2: CGPoint(x: 69.52, y: 251.76))
        bezier35Path.addCurve(to: CGPoint(x: 65.05, y: 205.09), controlPoint1: CGPoint(x: 65.12, y: 217.43), controlPoint2: CGPoint(x: 64.53, y: 211.16))
        bezier35Path.addCurve(to: CGPoint(x: 74.71, y: 175.83), controlPoint1: CGPoint(x: 66.05, y: 193.43), controlPoint2: CGPoint(x: 69.72, y: 183.67))
        bezier35Path.addCurve(to: CGPoint(x: 124.58, y: 147.85), controlPoint1: CGPoint(x: 84.54, y: 160.37), controlPoint2: CGPoint(x: 100.74, y: 148.98))
        bezier35Path.close()
        bezier35Path.usesEvenOddFillRule = true;

        logoTintColor.setFill()
        bezier35Path.fill()


        //// Oval 7 Drawing
        let oval7Path = UIBezierPath(ovalIn: CGRect(x: 104.36, y: 185.84, width: 46, height: 46.1))
        logoTintColor.setFill()
        oval7Path.fill()


        //// Oval 10 Drawing
        let oval10Path = UIBezierPath(ovalIn: CGRect(x: 260.86, y: 185.84, width: 46, height: 46.1))
        logoTintColor.setFill()
        oval10Path.fill()


        //// Bezier 36 Drawing
        let bezier36Path = UIBezierPath()
        bezier36Path.move(to: CGPoint(x: 174.04, y: 374.99))
        bezier36Path.addCurve(to: CGPoint(x: 145.33, y: 419.98), controlPoint1: CGPoint(x: 165.22, y: 390.73), controlPoint2: CGPoint(x: 155.48, y: 405.56))
        bezier36Path.addCurve(to: CGPoint(x: 98.78, y: 340.84), controlPoint1: CGPoint(x: 127.93, y: 395.51), controlPoint2: CGPoint(x: 112.22, y: 369.31))
        bezier36Path.addCurve(to: CGPoint(x: 98.86, y: 340.76), controlPoint1: CGPoint(x: 98.77, y: 340.7), controlPoint2: CGPoint(x: 98.86, y: 340.69))
        bezier36Path.addCurve(to: CGPoint(x: 174.04, y: 374.99), controlPoint1: CGPoint(x: 119.34, y: 356.76), controlPoint2: CGPoint(x: 143.4, y: 369.17))
        bezier36Path.close()
        bezier36Path.usesEvenOddFillRule = true;

        logoTintColor.setFill()
        bezier36Path.fill()


        //// Bezier 37 Drawing
        let bezier37Path = UIBezierPath()
        bezier37Path.move(to: CGPoint(x: 165.04, y: 446.19))
        bezier37Path.addCurve(to: CGPoint(x: 208.33, y: 377.9), controlPoint1: CGPoint(x: 180.82, y: 424.79), controlPoint2: CGPoint(x: 195.25, y: 402.01))
        bezier37Path.addCurve(to: CGPoint(x: 312.21, y: 340.76), controlPoint1: CGPoint(x: 253.92, y: 376.48), controlPoint2: CGPoint(x: 285.65, y: 361.2))
        bezier37Path.addCurve(to: CGPoint(x: 264.21, y: 422.27), controlPoint1: CGPoint(x: 298.6, y: 370.09), controlPoint2: CGPoint(x: 282.31, y: 397.05))
        bezier37Path.addCurve(to: CGPoint(x: 213.37, y: 484.62), controlPoint1: CGPoint(x: 248.57, y: 444.06), controlPoint2: CGPoint(x: 231.42, y: 464.95))
        bezier37Path.addCurve(to: CGPoint(x: 207.53, y: 490.95), controlPoint1: CGPoint(x: 211.53, y: 486.63), controlPoint2: CGPoint(x: 209.58, y: 488.77))
        bezier37Path.addCurve(to: CGPoint(x: 205.58, y: 492.99), controlPoint1: CGPoint(x: 207.02, y: 491.48), controlPoint2: CGPoint(x: 205.69, y: 492.97))
        bezier37Path.addCurve(to: CGPoint(x: 204.2, y: 491.58), controlPoint1: CGPoint(x: 205.45, y: 492.99), controlPoint2: CGPoint(x: 204.62, y: 492))
        bezier37Path.addCurve(to: CGPoint(x: 195.05, y: 481.61), controlPoint1: CGPoint(x: 200.97, y: 488.36), controlPoint2: CGPoint(x: 198.02, y: 484.85))
        bezier37Path.addCurve(to: CGPoint(x: 165.04, y: 446.19), controlPoint1: CGPoint(x: 184.61, y: 470.25), controlPoint2: CGPoint(x: 174.6, y: 458.31))
        bezier37Path.close()
        bezier37Path.usesEvenOddFillRule = true;

        logoTintColor.setFill()
        bezier37Path.fill()
    }

    @objc open class func drawSourceAppicon(logoTintColor: UIColor = UIColor(red: 0.300, green: 0.300, blue: 0.300, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let logoHighlightColor = logoTintColor.colorWithHighlight(1)
        let logoShadowColor = NSAssetKit.appLogoTintColor.colorWithShadow(0.218)

        //// Gradient Declarations
        let logoGradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(), colors: [NSAssetKit.appLogoTintColor.cgColor, logoShadowColor.cgColor] as CFArray, locations: [0, 1])!

        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 60, height: 60))
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(logoGradient, start: CGPoint(x: 30, y: -0), end: CGPoint(x: 30, y: 60), options: CGGradientDrawingOptions())
        context.restoreGState()


        //// outerShape 2 Drawing
        let outerShape2Path = UIBezierPath()
        outerShape2Path.move(to: CGPoint(x: 47.92, y: 22.86))
        outerShape2Path.addCurve(to: CGPoint(x: 44.72, y: 34.95), controlPoint1: CGPoint(x: 48.36, y: 25.52), controlPoint2: CGPoint(x: 47.02, y: 30.11))
        outerShape2Path.addCurve(to: CGPoint(x: 32.89, y: 51.19), controlPoint1: CGPoint(x: 41.79, y: 41.09), controlPoint2: CGPoint(x: 37.3, y: 47.65))
        outerShape2Path.addCurve(to: CGPoint(x: 30.47, y: 53), controlPoint1: CGPoint(x: 30.93, y: 52.78), controlPoint2: CGPoint(x: 31.05, y: 52.7))
        outerShape2Path.addCurve(to: CGPoint(x: 29.56, y: 53), controlPoint1: CGPoint(x: 30.31, y: 53), controlPoint2: CGPoint(x: 29.71, y: 53))
        outerShape2Path.addCurve(to: CGPoint(x: 27.13, y: 51.19), controlPoint1: CGPoint(x: 29.56, y: 53), controlPoint2: CGPoint(x: 28.1, y: 52.08))
        outerShape2Path.addCurve(to: CGPoint(x: 14.62, y: 34.86), controlPoint1: CGPoint(x: 23.24, y: 47.63), controlPoint2: CGPoint(x: 17.21, y: 41.03))
        outerShape2Path.addCurve(to: CGPoint(x: 12.11, y: 22.86), controlPoint1: CGPoint(x: 12.6, y: 30.06), controlPoint2: CGPoint(x: 11.67, y: 25.51))
        outerShape2Path.addCurve(to: CGPoint(x: 29.48, y: 6), controlPoint1: CGPoint(x: 12.11, y: 13.55), controlPoint2: CGPoint(x: 19.89, y: 6))
        outerShape2Path.addCurve(to: CGPoint(x: 30.54, y: 6), controlPoint1: CGPoint(x: 29.66, y: 6), controlPoint2: CGPoint(x: 30.36, y: 6))
        outerShape2Path.addCurve(to: CGPoint(x: 47.92, y: 22.86), controlPoint1: CGPoint(x: 40.14, y: 6), controlPoint2: CGPoint(x: 47.92, y: 13.55))
        outerShape2Path.close()
        outerShape2Path.lineCapStyle = .round;

        outerShape2Path.lineJoinStyle = .round;

        logoHighlightColor.setStroke()
        outerShape2Path.lineWidth = 1.5
        outerShape2Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 17, y: 11, width: 26, height: 24))
        logoHighlightColor.setStroke()
        ovalPath.lineWidth = 1.5
        ovalPath.stroke()


        //// crest
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 39, y: 36))
        bezierPath.addCurve(to: CGPoint(x: 31.81, y: 45.8), controlPoint1: CGPoint(x: 39, y: 36), controlPoint2: CGPoint(x: 36.89, y: 41.57))
        bezierPath.addCurve(to: CGPoint(x: 30.43, y: 46.9), controlPoint1: CGPoint(x: 30.79, y: 46.65), controlPoint2: CGPoint(x: 30.64, y: 46.78))
        bezierPath.addCurve(to: CGPoint(x: 30.34, y: 47), controlPoint1: CGPoint(x: 30.37, y: 46.97), controlPoint2: CGPoint(x: 30.34, y: 47))
        bezierPath.addLine(to: CGPoint(x: 29.66, y: 47))
        bezierPath.addCurve(to: CGPoint(x: 29.57, y: 46.9), controlPoint1: CGPoint(x: 29.66, y: 47), controlPoint2: CGPoint(x: 29.63, y: 46.97))
        bezierPath.addCurve(to: CGPoint(x: 28.19, y: 45.8), controlPoint1: CGPoint(x: 29.36, y: 46.78), controlPoint2: CGPoint(x: 29.21, y: 46.65))
        bezierPath.addCurve(to: CGPoint(x: 26.19, y: 43.93), controlPoint1: CGPoint(x: 27.46, y: 45.19), controlPoint2: CGPoint(x: 26.8, y: 44.56))
        bezierPath.addCurve(to: CGPoint(x: 29.39, y: 39.07), controlPoint1: CGPoint(x: 26.99, y: 42.71), controlPoint2: CGPoint(x: 28.59, y: 40.27))
        bezierPath.addCurve(to: CGPoint(x: 30, y: 39.09), controlPoint1: CGPoint(x: 29.59, y: 39.08), controlPoint2: CGPoint(x: 29.8, y: 39.09))
        bezierPath.addCurve(to: CGPoint(x: 39, y: 36), controlPoint1: CGPoint(x: 34.2, y: 39.09), controlPoint2: CGPoint(x: 39, y: 36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 21, y: 36))
        bezierPath.addCurve(to: CGPoint(x: 26.73, y: 38.58), controlPoint1: CGPoint(x: 21, y: 36), controlPoint2: CGPoint(x: 23.65, y: 37.7))
        bezierPath.addCurve(to: CGPoint(x: 24.35, y: 41.76), controlPoint1: CGPoint(x: 26.31, y: 39.14), controlPoint2: CGPoint(x: 25.19, y: 40.64))
        bezierPath.addCurve(to: CGPoint(x: 21, y: 36), controlPoint1: CGPoint(x: 22.02, y: 38.69), controlPoint2: CGPoint(x: 21, y: 36))
        bezierPath.addLine(to: CGPoint(x: 21, y: 36))
        bezierPath.close()
        bezierPath.lineCapStyle = .round;

        bezierPath.lineJoinStyle = .round;

        logoHighlightColor.setFill()
        bezierPath.fill()




        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 22, y: 20, width: 4, height: 4))
        logoHighlightColor.setFill()
        oval5Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 30, y: 17))
        bezier3Path.addLine(to: CGPoint(x: 30, y: 28))
        bezier3Path.lineCapStyle = .round;

        logoHighlightColor.setStroke()
        bezier3Path.lineWidth = 1.5
        bezier3Path.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 34, y: 20, width: 4, height: 4))
        logoHighlightColor.setFill()
        oval2Path.fill()
    }

    @objc open class func drawListIconSource() {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 10, height: 10), byRoundingCorners: [UIRectCorner.topRight, UIRectCorner.bottomRight], cornerRadii: CGSize(width: 2, height: 2))
        rectanglePath.close()
        UIColor.gray.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 15, y: 3, width: 29, height: 4), cornerRadius: 2)
        UIColor.gray.setFill()
        rectangle2Path.fill()
    }

    @objc open class func drawListIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 22, height: 6)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)
        context.scaleBy(x: symbolRect.size.width / 44, y: symbolRect.size.height / 10)

        NSAssetKit.drawListIconSource()
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 8, width: 22, height: 6)
        context.saveGState()
        UIRectClip(symbol2Rect)
        context.translateBy(x: symbol2Rect.origin.x, y: symbol2Rect.origin.y)
        context.scaleBy(x: symbol2Rect.size.width / 44, y: symbol2Rect.size.height / 10)

        NSAssetKit.drawListIconSource()
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 0, y: 16, width: 22, height: 6)
        context.saveGState()
        UIRectClip(symbol3Rect)
        context.translateBy(x: symbol3Rect.origin.x, y: symbol3Rect.origin.y)
        context.scaleBy(x: symbol3Rect.size.width / 44, y: symbol3Rect.size.height / 10)

        NSAssetKit.drawListIconSource()
        context.restoreGState()
    }

    @objc open class func drawSettingsIcon() {

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9.49, y: 13.89))
        bezierPath.addCurve(to: CGPoint(x: 9.65, y: 13.43), controlPoint1: CGPoint(x: 9.59, y: 13.76), controlPoint2: CGPoint(x: 9.65, y: 13.6))
        bezierPath.addCurve(to: CGPoint(x: 9.6, y: 13.17), controlPoint1: CGPoint(x: 9.65, y: 13.34), controlPoint2: CGPoint(x: 9.63, y: 13.25))
        bezierPath.addLine(to: CGPoint(x: 8.99, y: 11.57))
        bezierPath.addCurve(to: CGPoint(x: 10.06, y: 10.98), controlPoint1: CGPoint(x: 9.37, y: 11.41), controlPoint2: CGPoint(x: 9.73, y: 11.23))
        bezierPath.addLine(to: CGPoint(x: 11.15, y: 12.32))
        bezierPath.addCurve(to: CGPoint(x: 11.74, y: 12.6), controlPoint1: CGPoint(x: 11.29, y: 12.5), controlPoint2: CGPoint(x: 11.51, y: 12.6))
        bezierPath.addCurve(to: CGPoint(x: 12.29, y: 12.38), controlPoint1: CGPoint(x: 11.94, y: 12.6), controlPoint2: CGPoint(x: 12.13, y: 12.53))
        bezierPath.addCurve(to: CGPoint(x: 13.2, y: 11.34), controlPoint1: CGPoint(x: 12.63, y: 12.06), controlPoint2: CGPoint(x: 12.93, y: 11.72))
        bezierPath.addCurve(to: CGPoint(x: 13.35, y: 10.9), controlPoint1: CGPoint(x: 13.3, y: 11.2), controlPoint2: CGPoint(x: 13.35, y: 11.05))
        bezierPath.addCurve(to: CGPoint(x: 12.96, y: 10.24), controlPoint1: CGPoint(x: 13.35, y: 10.63), controlPoint2: CGPoint(x: 13.21, y: 10.37))
        bezierPath.addLine(to: CGPoint(x: 11.44, y: 9.39))
        bezierPath.addCurve(to: CGPoint(x: 11.89, y: 8.16), controlPoint1: CGPoint(x: 11.65, y: 9), controlPoint2: CGPoint(x: 11.8, y: 8.59))
        bezierPath.addLine(to: CGPoint(x: 13.61, y: 8.46))
        bezierPath.addCurve(to: CGPoint(x: 13.75, y: 8.47), controlPoint1: CGPoint(x: 13.66, y: 8.47), controlPoint2: CGPoint(x: 13.7, y: 8.47))
        bezierPath.addCurve(to: CGPoint(x: 14.52, y: 7.76), controlPoint1: CGPoint(x: 14.14, y: 8.47), controlPoint2: CGPoint(x: 14.49, y: 8.18))
        bezierPath.addLine(to: CGPoint(x: 14.55, y: 7.2))
        bezierPath.addLine(to: CGPoint(x: 14.38, y: 7.19))
        bezierPath.addLine(to: CGPoint(x: 14.55, y: 7.18))
        bezierPath.addLine(to: CGPoint(x: 14.51, y: 6.52))
        bezierPath.addCurve(to: CGPoint(x: 14.25, y: 6.01), controlPoint1: CGPoint(x: 14.49, y: 6.31), controlPoint2: CGPoint(x: 14.39, y: 6.13))
        bezierPath.addCurve(to: CGPoint(x: 13.74, y: 5.81), controlPoint1: CGPoint(x: 14.12, y: 5.88), controlPoint2: CGPoint(x: 13.94, y: 5.81))
        bezierPath.addCurve(to: CGPoint(x: 13.59, y: 5.83), controlPoint1: CGPoint(x: 13.69, y: 5.81), controlPoint2: CGPoint(x: 13.64, y: 5.81))
        bezierPath.addLine(to: CGPoint(x: 11.88, y: 6.14))
        bezierPath.addCurve(to: CGPoint(x: 11.49, y: 5.07), controlPoint1: CGPoint(x: 11.79, y: 5.78), controlPoint2: CGPoint(x: 11.66, y: 5.42))
        bezierPath.addLine(to: CGPoint(x: 13.02, y: 4.26))
        bezierPath.addCurve(to: CGPoint(x: 13.42, y: 3.6), controlPoint1: CGPoint(x: 13.27, y: 4.12), controlPoint2: CGPoint(x: 13.42, y: 3.87))
        bezierPath.addCurve(to: CGPoint(x: 13.42, y: 3.6), controlPoint1: CGPoint(x: 13.42, y: 3.6), controlPoint2: CGPoint(x: 13.42, y: 3.6))
        bezierPath.addCurve(to: CGPoint(x: 13.29, y: 3.16), controlPoint1: CGPoint(x: 13.42, y: 3.45), controlPoint2: CGPoint(x: 13.38, y: 3.3))
        bezierPath.addCurve(to: CGPoint(x: 12.4, y: 2.1), controlPoint1: CGPoint(x: 13.02, y: 2.78), controlPoint2: CGPoint(x: 12.73, y: 2.43))
        bezierPath.addCurve(to: CGPoint(x: 11.83, y: 1.87), controlPoint1: CGPoint(x: 12.24, y: 1.95), controlPoint2: CGPoint(x: 12.03, y: 1.87))
        bezierPath.addCurve(to: CGPoint(x: 11.25, y: 2.14), controlPoint1: CGPoint(x: 11.61, y: 1.87), controlPoint2: CGPoint(x: 11.39, y: 1.96))
        bezierPath.addLine(to: CGPoint(x: 10.13, y: 3.46))
        bezierPath.addCurve(to: CGPoint(x: 9.08, y: 2.85), controlPoint1: CGPoint(x: 9.81, y: 3.22), controlPoint2: CGPoint(x: 9.45, y: 3.01))
        bezierPath.addLine(to: CGPoint(x: 9.72, y: 1.26))
        bezierPath.addCurve(to: CGPoint(x: 9.77, y: 0.98), controlPoint1: CGPoint(x: 9.76, y: 1.17), controlPoint2: CGPoint(x: 9.77, y: 1.08))
        bezierPath.addCurve(to: CGPoint(x: 9.62, y: 0.53), controlPoint1: CGPoint(x: 9.77, y: 0.82), controlPoint2: CGPoint(x: 9.72, y: 0.66))
        bezierPath.addCurve(to: CGPoint(x: 9.2, y: 0.25), controlPoint1: CGPoint(x: 9.52, y: 0.4), controlPoint2: CGPoint(x: 9.38, y: 0.3))
        bezierPath.addCurve(to: CGPoint(x: 7.83, y: 0), controlPoint1: CGPoint(x: 8.75, y: 0.12), controlPoint2: CGPoint(x: 8.29, y: 0.05))
        bezierPath.addCurve(to: CGPoint(x: 7.77, y: 0), controlPoint1: CGPoint(x: 7.81, y: 0), controlPoint2: CGPoint(x: 7.79, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 7.21, y: 0.21), controlPoint1: CGPoint(x: 7.55, y: 0), controlPoint2: CGPoint(x: 7.36, y: 0.08))
        bezierPath.addCurve(to: CGPoint(x: 6.97, y: 0.74), controlPoint1: CGPoint(x: 7.06, y: 0.34), controlPoint2: CGPoint(x: 6.98, y: 0.53))
        bezierPath.addCurve(to: CGPoint(x: 6.98, y: 0.77), controlPoint1: CGPoint(x: 6.97, y: 0.75), controlPoint2: CGPoint(x: 6.97, y: 0.76))
        bezierPath.addLine(to: CGPoint(x: 6.99, y: 2.47))
        bezierPath.addCurve(to: CGPoint(x: 5.68, y: 2.71), controlPoint1: CGPoint(x: 6.54, y: 2.49), controlPoint2: CGPoint(x: 6.1, y: 2.57))
        bezierPath.addLine(to: CGPoint(x: 5.08, y: 1.1))
        bezierPath.addCurve(to: CGPoint(x: 4.35, y: 0.59), controlPoint1: CGPoint(x: 4.97, y: 0.8), controlPoint2: CGPoint(x: 4.68, y: 0.6))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 0.68), controlPoint1: CGPoint(x: 4.23, y: 0.59), controlPoint2: CGPoint(x: 4.11, y: 0.62))
        bezierPath.addCurve(to: CGPoint(x: 3.48, y: 0.95), controlPoint1: CGPoint(x: 3.84, y: 0.76), controlPoint2: CGPoint(x: 3.66, y: 0.83))
        bezierPath.addCurve(to: CGPoint(x: 2.9, y: 1.32), controlPoint1: CGPoint(x: 3.3, y: 1.06), controlPoint2: CGPoint(x: 3.09, y: 1.16))
        bezierPath.addCurve(to: CGPoint(x: 2.56, y: 1.94), controlPoint1: CGPoint(x: 2.68, y: 1.47), controlPoint2: CGPoint(x: 2.56, y: 1.7))
        bezierPath.addCurve(to: CGPoint(x: 2.76, y: 2.44), controlPoint1: CGPoint(x: 2.56, y: 2.11), controlPoint2: CGPoint(x: 2.63, y: 2.29))
        bezierPath.addLine(to: CGPoint(x: 3.9, y: 3.72))
        bezierPath.addCurve(to: CGPoint(x: 3.15, y: 4.6), controlPoint1: CGPoint(x: 3.61, y: 3.98), controlPoint2: CGPoint(x: 3.36, y: 4.28))
        bezierPath.addLine(to: CGPoint(x: 1.66, y: 3.7))
        bezierPath.addCurve(to: CGPoint(x: 1.25, y: 3.59), controlPoint1: CGPoint(x: 1.54, y: 3.62), controlPoint2: CGPoint(x: 1.4, y: 3.59))
        bezierPath.addCurve(to: CGPoint(x: 1.25, y: 3.59), controlPoint1: CGPoint(x: 1.25, y: 3.59), controlPoint2: CGPoint(x: 1.25, y: 3.59))
        bezierPath.addCurve(to: CGPoint(x: 0.55, y: 4.03), controlPoint1: CGPoint(x: 0.97, y: 3.59), controlPoint2: CGPoint(x: 0.69, y: 3.74))
        bezierPath.addCurve(to: CGPoint(x: 0.06, y: 5.31), controlPoint1: CGPoint(x: 0.35, y: 4.43), controlPoint2: CGPoint(x: 0.18, y: 4.87))
        bezierPath.addCurve(to: CGPoint(x: 0.03, y: 5.52), controlPoint1: CGPoint(x: 0.04, y: 5.37), controlPoint2: CGPoint(x: 0.03, y: 5.45))
        bezierPath.addCurve(to: CGPoint(x: 0.68, y: 6.26), controlPoint1: CGPoint(x: 0.03, y: 5.89), controlPoint2: CGPoint(x: 0.31, y: 6.21))
        bezierPath.addLine(to: CGPoint(x: 2.4, y: 6.55))
        bezierPath.addCurve(to: CGPoint(x: 2.35, y: 7.16), controlPoint1: CGPoint(x: 2.37, y: 6.75), controlPoint2: CGPoint(x: 2.35, y: 6.96))
        bezierPath.addCurve(to: CGPoint(x: 2.39, y: 7.74), controlPoint1: CGPoint(x: 2.35, y: 7.36), controlPoint2: CGPoint(x: 2.37, y: 7.55))
        bezierPath.addLine(to: CGPoint(x: 0.66, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 0.19, y: 8.24), controlPoint1: CGPoint(x: 0.48, y: 8.02), controlPoint2: CGPoint(x: 0.31, y: 8.11))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 8.74), controlPoint1: CGPoint(x: 0.07, y: 8.38), controlPoint2: CGPoint(x: 0, y: 8.55))
        bezierPath.addCurve(to: CGPoint(x: 0.03, y: 8.95), controlPoint1: CGPoint(x: 0, y: 8.81), controlPoint2: CGPoint(x: 0.01, y: 8.88))
        bezierPath.addCurve(to: CGPoint(x: 0.49, y: 10.23), controlPoint1: CGPoint(x: 0.14, y: 9.39), controlPoint2: CGPoint(x: 0.3, y: 9.82))
        bezierPath.addCurve(to: CGPoint(x: 1.2, y: 10.69), controlPoint1: CGPoint(x: 0.62, y: 10.52), controlPoint2: CGPoint(x: 0.91, y: 10.69))
        bezierPath.addCurve(to: CGPoint(x: 1.59, y: 10.58), controlPoint1: CGPoint(x: 1.33, y: 10.69), controlPoint2: CGPoint(x: 1.47, y: 10.65))
        bezierPath.addLine(to: CGPoint(x: 3.1, y: 9.71))
        bezierPath.addCurve(to: CGPoint(x: 3.95, y: 10.71), controlPoint1: CGPoint(x: 3.33, y: 10.08), controlPoint2: CGPoint(x: 3.62, y: 10.42))
        bezierPath.addLine(to: CGPoint(x: 2.83, y: 12.02))
        bezierPath.addCurve(to: CGPoint(x: 2.65, y: 12.5), controlPoint1: CGPoint(x: 2.71, y: 12.16), controlPoint2: CGPoint(x: 2.65, y: 12.33))
        bezierPath.addCurve(to: CGPoint(x: 2.99, y: 13.13), controlPoint1: CGPoint(x: 2.65, y: 12.74), controlPoint2: CGPoint(x: 2.77, y: 12.98))
        bezierPath.addLine(to: CGPoint(x: 3.48, y: 13.44))
        bezierPath.addLine(to: CGPoint(x: 3.49, y: 13.44))
        bezierPath.addCurve(to: CGPoint(x: 4.11, y: 13.75), controlPoint1: CGPoint(x: 3.69, y: 13.57), controlPoint2: CGPoint(x: 3.91, y: 13.66))
        bezierPath.addCurve(to: CGPoint(x: 4.45, y: 13.83), controlPoint1: CGPoint(x: 4.22, y: 13.81), controlPoint2: CGPoint(x: 4.34, y: 13.83))
        bezierPath.addCurve(to: CGPoint(x: 5.18, y: 13.32), controlPoint1: CGPoint(x: 4.78, y: 13.83), controlPoint2: CGPoint(x: 5.07, y: 13.63))
        bezierPath.addLine(to: CGPoint(x: 5.75, y: 11.7))
        bezierPath.addCurve(to: CGPoint(x: 6.89, y: 11.91), controlPoint1: CGPoint(x: 6.11, y: 11.81), controlPoint2: CGPoint(x: 6.5, y: 11.89))
        bezierPath.addLine(to: CGPoint(x: 6.85, y: 13.62))
        bezierPath.addCurve(to: CGPoint(x: 6.85, y: 13.64), controlPoint1: CGPoint(x: 6.85, y: 13.62), controlPoint2: CGPoint(x: 6.85, y: 13.63))
        bezierPath.addCurve(to: CGPoint(x: 7.07, y: 14.17), controlPoint1: CGPoint(x: 6.85, y: 13.85), controlPoint2: CGPoint(x: 6.93, y: 14.04))
        bezierPath.addCurve(to: CGPoint(x: 7.62, y: 14.39), controlPoint1: CGPoint(x: 7.21, y: 14.31), controlPoint2: CGPoint(x: 7.41, y: 14.39))
        bezierPath.addCurve(to: CGPoint(x: 7.68, y: 14.39), controlPoint1: CGPoint(x: 7.64, y: 14.39), controlPoint2: CGPoint(x: 7.66, y: 14.39))
        bezierPath.addCurve(to: CGPoint(x: 9.06, y: 14.17), controlPoint1: CGPoint(x: 8.15, y: 14.36), controlPoint2: CGPoint(x: 8.61, y: 14.29))
        bezierPath.addCurve(to: CGPoint(x: 9.49, y: 13.89), controlPoint1: CGPoint(x: 9.25, y: 14.13), controlPoint2: CGPoint(x: 9.39, y: 14.03))
        bezierPath.close()
        UIColor.gray.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 22, y: 16.99))
        bezier2Path.addLine(to: CGPoint(x: 21.98, y: 16.55))
        bezier2Path.addCurve(to: CGPoint(x: 21.81, y: 16.21), controlPoint1: CGPoint(x: 21.96, y: 16.41), controlPoint2: CGPoint(x: 21.9, y: 16.29))
        bezier2Path.addCurve(to: CGPoint(x: 21.47, y: 16.08), controlPoint1: CGPoint(x: 21.71, y: 16.12), controlPoint2: CGPoint(x: 21.59, y: 16.08))
        bezier2Path.addCurve(to: CGPoint(x: 21.36, y: 16.09), controlPoint1: CGPoint(x: 21.43, y: 16.08), controlPoint2: CGPoint(x: 21.4, y: 16.08))
        bezier2Path.addLine(to: CGPoint(x: 20.23, y: 16.3))
        bezier2Path.addCurve(to: CGPoint(x: 19.97, y: 15.59), controlPoint1: CGPoint(x: 20.17, y: 16.06), controlPoint2: CGPoint(x: 20.08, y: 15.82))
        bezier2Path.addLine(to: CGPoint(x: 20.99, y: 15.05))
        bezier2Path.addCurve(to: CGPoint(x: 21.25, y: 14.61), controlPoint1: CGPoint(x: 21.16, y: 14.96), controlPoint2: CGPoint(x: 21.25, y: 14.79))
        bezier2Path.addCurve(to: CGPoint(x: 21.25, y: 14.61), controlPoint1: CGPoint(x: 21.25, y: 14.61), controlPoint2: CGPoint(x: 21.25, y: 14.61))
        bezier2Path.addCurve(to: CGPoint(x: 21.17, y: 14.32), controlPoint1: CGPoint(x: 21.25, y: 14.51), controlPoint2: CGPoint(x: 21.22, y: 14.41))
        bezier2Path.addCurve(to: CGPoint(x: 20.58, y: 13.61), controlPoint1: CGPoint(x: 20.99, y: 14.06), controlPoint2: CGPoint(x: 20.79, y: 13.83))
        bezier2Path.addCurve(to: CGPoint(x: 20.2, y: 13.46), controlPoint1: CGPoint(x: 20.46, y: 13.51), controlPoint2: CGPoint(x: 20.33, y: 13.46))
        bezier2Path.addCurve(to: CGPoint(x: 19.81, y: 13.64), controlPoint1: CGPoint(x: 20.05, y: 13.46), controlPoint2: CGPoint(x: 19.91, y: 13.52))
        bezier2Path.addLine(to: CGPoint(x: 19.07, y: 14.51))
        bezier2Path.addCurve(to: CGPoint(x: 18.37, y: 14.11), controlPoint1: CGPoint(x: 18.85, y: 14.35), controlPoint2: CGPoint(x: 18.62, y: 14.22))
        bezier2Path.addLine(to: CGPoint(x: 18.79, y: 13.05))
        bezier2Path.addCurve(to: CGPoint(x: 18.83, y: 12.87), controlPoint1: CGPoint(x: 18.82, y: 13), controlPoint2: CGPoint(x: 18.83, y: 12.93))
        bezier2Path.addCurve(to: CGPoint(x: 18.73, y: 12.57), controlPoint1: CGPoint(x: 18.83, y: 12.76), controlPoint2: CGPoint(x: 18.79, y: 12.66))
        bezier2Path.addCurve(to: CGPoint(x: 18.45, y: 12.38), controlPoint1: CGPoint(x: 18.66, y: 12.48), controlPoint2: CGPoint(x: 18.57, y: 12.41))
        bezier2Path.addCurve(to: CGPoint(x: 17.54, y: 12.22), controlPoint1: CGPoint(x: 18.15, y: 12.3), controlPoint2: CGPoint(x: 17.84, y: 12.25))
        bezier2Path.addCurve(to: CGPoint(x: 17.5, y: 12.22), controlPoint1: CGPoint(x: 17.52, y: 12.22), controlPoint2: CGPoint(x: 17.51, y: 12.22))
        bezier2Path.addCurve(to: CGPoint(x: 17.12, y: 12.36), controlPoint1: CGPoint(x: 17.35, y: 12.22), controlPoint2: CGPoint(x: 17.22, y: 12.27))
        bezier2Path.addCurve(to: CGPoint(x: 16.97, y: 12.71), controlPoint1: CGPoint(x: 17.03, y: 12.45), controlPoint2: CGPoint(x: 16.97, y: 12.57))
        bezier2Path.addCurve(to: CGPoint(x: 16.97, y: 12.73), controlPoint1: CGPoint(x: 16.97, y: 12.71), controlPoint2: CGPoint(x: 16.97, y: 12.72))
        bezier2Path.addLine(to: CGPoint(x: 16.98, y: 13.86))
        bezier2Path.addCurve(to: CGPoint(x: 16.11, y: 14.01), controlPoint1: CGPoint(x: 16.68, y: 13.87), controlPoint2: CGPoint(x: 16.39, y: 13.92))
        bezier2Path.addLine(to: CGPoint(x: 15.71, y: 12.95))
        bezier2Path.addCurve(to: CGPoint(x: 15.23, y: 12.61), controlPoint1: CGPoint(x: 15.64, y: 12.75), controlPoint2: CGPoint(x: 15.44, y: 12.61))
        bezier2Path.addCurve(to: CGPoint(x: 14.99, y: 12.67), controlPoint1: CGPoint(x: 15.15, y: 12.61), controlPoint2: CGPoint(x: 15.07, y: 12.63))
        bezier2Path.addCurve(to: CGPoint(x: 14.65, y: 12.84), controlPoint1: CGPoint(x: 14.88, y: 12.72), controlPoint2: CGPoint(x: 14.76, y: 12.77))
        bezier2Path.addCurve(to: CGPoint(x: 14.26, y: 13.09), controlPoint1: CGPoint(x: 14.53, y: 12.92), controlPoint2: CGPoint(x: 14.39, y: 12.99))
        bezier2Path.addCurve(to: CGPoint(x: 14.04, y: 13.51), controlPoint1: CGPoint(x: 14.12, y: 13.19), controlPoint2: CGPoint(x: 14.04, y: 13.35))
        bezier2Path.addCurve(to: CGPoint(x: 14.17, y: 13.84), controlPoint1: CGPoint(x: 14.04, y: 13.62), controlPoint2: CGPoint(x: 14.08, y: 13.74))
        bezier2Path.addLine(to: CGPoint(x: 14.93, y: 14.69))
        bezier2Path.addCurve(to: CGPoint(x: 14.43, y: 15.27), controlPoint1: CGPoint(x: 14.73, y: 14.86), controlPoint2: CGPoint(x: 14.57, y: 15.06))
        bezier2Path.addLine(to: CGPoint(x: 13.44, y: 14.68))
        bezier2Path.addCurve(to: CGPoint(x: 13.17, y: 14.6), controlPoint1: CGPoint(x: 13.36, y: 14.63), controlPoint2: CGPoint(x: 13.26, y: 14.6))
        bezier2Path.addCurve(to: CGPoint(x: 13.16, y: 14.6), controlPoint1: CGPoint(x: 13.16, y: 14.6), controlPoint2: CGPoint(x: 13.16, y: 14.6))
        bezier2Path.addCurve(to: CGPoint(x: 12.7, y: 14.89), controlPoint1: CGPoint(x: 12.98, y: 14.6), controlPoint2: CGPoint(x: 12.79, y: 14.7))
        bezier2Path.addCurve(to: CGPoint(x: 12.38, y: 15.74), controlPoint1: CGPoint(x: 12.56, y: 15.16), controlPoint2: CGPoint(x: 12.46, y: 15.45))
        bezier2Path.addCurve(to: CGPoint(x: 12.36, y: 15.88), controlPoint1: CGPoint(x: 12.36, y: 15.79), controlPoint2: CGPoint(x: 12.36, y: 15.84))
        bezier2Path.addCurve(to: CGPoint(x: 12.79, y: 16.38), controlPoint1: CGPoint(x: 12.36, y: 16.13), controlPoint2: CGPoint(x: 12.54, y: 16.34))
        bezier2Path.addLine(to: CGPoint(x: 13.93, y: 16.57))
        bezier2Path.addCurve(to: CGPoint(x: 13.9, y: 16.98), controlPoint1: CGPoint(x: 13.91, y: 16.7), controlPoint2: CGPoint(x: 13.9, y: 16.84))
        bezier2Path.addCurve(to: CGPoint(x: 13.92, y: 17.36), controlPoint1: CGPoint(x: 13.9, y: 17.11), controlPoint2: CGPoint(x: 13.91, y: 17.23))
        bezier2Path.addLine(to: CGPoint(x: 12.77, y: 17.53))
        bezier2Path.addCurve(to: CGPoint(x: 12.46, y: 17.69), controlPoint1: CGPoint(x: 12.65, y: 17.55), controlPoint2: CGPoint(x: 12.54, y: 17.61))
        bezier2Path.addCurve(to: CGPoint(x: 12.33, y: 18.02), controlPoint1: CGPoint(x: 12.38, y: 17.78), controlPoint2: CGPoint(x: 12.33, y: 17.9))
        bezier2Path.addCurve(to: CGPoint(x: 12.35, y: 18.16), controlPoint1: CGPoint(x: 12.33, y: 18.07), controlPoint2: CGPoint(x: 12.34, y: 18.12))
        bezier2Path.addCurve(to: CGPoint(x: 12.66, y: 19.02), controlPoint1: CGPoint(x: 12.42, y: 18.45), controlPoint2: CGPoint(x: 12.53, y: 18.74))
        bezier2Path.addCurve(to: CGPoint(x: 13.13, y: 19.32), controlPoint1: CGPoint(x: 12.75, y: 19.21), controlPoint2: CGPoint(x: 12.94, y: 19.32))
        bezier2Path.addCurve(to: CGPoint(x: 13.39, y: 19.24), controlPoint1: CGPoint(x: 13.22, y: 19.32), controlPoint2: CGPoint(x: 13.31, y: 19.29))
        bezier2Path.addLine(to: CGPoint(x: 14.39, y: 18.67))
        bezier2Path.addCurve(to: CGPoint(x: 14.96, y: 19.34), controlPoint1: CGPoint(x: 14.55, y: 18.92), controlPoint2: CGPoint(x: 14.74, y: 19.14))
        bezier2Path.addLine(to: CGPoint(x: 14.22, y: 20.21))
        bezier2Path.addCurve(to: CGPoint(x: 14.1, y: 20.52), controlPoint1: CGPoint(x: 14.14, y: 20.3), controlPoint2: CGPoint(x: 14.1, y: 20.41))
        bezier2Path.addCurve(to: CGPoint(x: 14.32, y: 20.95), controlPoint1: CGPoint(x: 14.1, y: 20.68), controlPoint2: CGPoint(x: 14.18, y: 20.84))
        bezier2Path.addLine(to: CGPoint(x: 14.65, y: 21.15))
        bezier2Path.addLine(to: CGPoint(x: 14.65, y: 21.15))
        bezier2Path.addCurve(to: CGPoint(x: 15.06, y: 21.36), controlPoint1: CGPoint(x: 14.79, y: 21.24), controlPoint2: CGPoint(x: 14.93, y: 21.29))
        bezier2Path.addCurve(to: CGPoint(x: 15.29, y: 21.41), controlPoint1: CGPoint(x: 15.14, y: 21.39), controlPoint2: CGPoint(x: 15.21, y: 21.41))
        bezier2Path.addCurve(to: CGPoint(x: 15.77, y: 21.07), controlPoint1: CGPoint(x: 15.51, y: 21.41), controlPoint2: CGPoint(x: 15.71, y: 21.27))
        bezier2Path.addLine(to: CGPoint(x: 16.15, y: 19.99))
        bezier2Path.addCurve(to: CGPoint(x: 16.91, y: 20.13), controlPoint1: CGPoint(x: 16.4, y: 20.06), controlPoint2: CGPoint(x: 16.65, y: 20.12))
        bezier2Path.addLine(to: CGPoint(x: 16.88, y: 21.27))
        bezier2Path.addCurve(to: CGPoint(x: 16.88, y: 21.28), controlPoint1: CGPoint(x: 16.88, y: 21.27), controlPoint2: CGPoint(x: 16.88, y: 21.27))
        bezier2Path.addCurve(to: CGPoint(x: 17.03, y: 21.64), controlPoint1: CGPoint(x: 16.88, y: 21.42), controlPoint2: CGPoint(x: 16.94, y: 21.55))
        bezier2Path.addCurve(to: CGPoint(x: 17.4, y: 21.78), controlPoint1: CGPoint(x: 17.13, y: 21.72), controlPoint2: CGPoint(x: 17.26, y: 21.78))
        bezier2Path.addCurve(to: CGPoint(x: 17.44, y: 21.78), controlPoint1: CGPoint(x: 17.41, y: 21.78), controlPoint2: CGPoint(x: 17.42, y: 21.78))
        bezier2Path.addCurve(to: CGPoint(x: 18.36, y: 21.63), controlPoint1: CGPoint(x: 17.75, y: 21.76), controlPoint2: CGPoint(x: 18.06, y: 21.72))
        bezier2Path.addCurve(to: CGPoint(x: 18.64, y: 21.45), controlPoint1: CGPoint(x: 18.48, y: 21.61), controlPoint2: CGPoint(x: 18.58, y: 21.54))
        bezier2Path.addCurve(to: CGPoint(x: 18.75, y: 21.14), controlPoint1: CGPoint(x: 18.71, y: 21.36), controlPoint2: CGPoint(x: 18.75, y: 21.25))
        bezier2Path.addCurve(to: CGPoint(x: 18.71, y: 20.97), controlPoint1: CGPoint(x: 18.75, y: 21.08), controlPoint2: CGPoint(x: 18.74, y: 21.02))
        bezier2Path.addLine(to: CGPoint(x: 18.31, y: 19.9))
        bezier2Path.addCurve(to: CGPoint(x: 19.02, y: 19.52), controlPoint1: CGPoint(x: 18.56, y: 19.8), controlPoint2: CGPoint(x: 18.8, y: 19.68))
        bezier2Path.addLine(to: CGPoint(x: 19.74, y: 20.4))
        bezier2Path.addCurve(to: CGPoint(x: 20.14, y: 20.59), controlPoint1: CGPoint(x: 19.84, y: 20.53), controlPoint2: CGPoint(x: 19.99, y: 20.59))
        bezier2Path.addCurve(to: CGPoint(x: 20.5, y: 20.45), controlPoint1: CGPoint(x: 20.27, y: 20.59), controlPoint2: CGPoint(x: 20.4, y: 20.54))
        bezier2Path.addCurve(to: CGPoint(x: 21.11, y: 19.75), controlPoint1: CGPoint(x: 20.73, y: 20.23), controlPoint2: CGPoint(x: 20.93, y: 20))
        bezier2Path.addCurve(to: CGPoint(x: 21.2, y: 19.46), controlPoint1: CGPoint(x: 21.17, y: 19.66), controlPoint2: CGPoint(x: 21.2, y: 19.56))
        bezier2Path.addCurve(to: CGPoint(x: 20.94, y: 19.02), controlPoint1: CGPoint(x: 21.2, y: 19.28), controlPoint2: CGPoint(x: 21.11, y: 19.11))
        bezier2Path.addLine(to: CGPoint(x: 19.94, y: 18.46))
        bezier2Path.addCurve(to: CGPoint(x: 20.24, y: 17.64), controlPoint1: CGPoint(x: 20.08, y: 18.2), controlPoint2: CGPoint(x: 20.18, y: 17.93))
        bezier2Path.addLine(to: CGPoint(x: 21.38, y: 17.84))
        bezier2Path.addCurve(to: CGPoint(x: 21.47, y: 17.85), controlPoint1: CGPoint(x: 21.41, y: 17.84), controlPoint2: CGPoint(x: 21.44, y: 17.85))
        bezier2Path.addCurve(to: CGPoint(x: 21.98, y: 17.37), controlPoint1: CGPoint(x: 21.73, y: 17.85), controlPoint2: CGPoint(x: 21.96, y: 17.65))
        bezier2Path.addLine(to: CGPoint(x: 22, y: 17))
        bezier2Path.addLine(to: CGPoint(x: 21.89, y: 17))
        bezier2Path.addLine(to: CGPoint(x: 22, y: 16.99))
        bezier2Path.close()
        UIColor.gray.setFill()
        bezier2Path.fill()
    }

    @objc open class func drawAppStoreIcon(logoTintColor: UIColor = UIColor(red: 0.300, green: 0.300, blue: 0.300, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 512, height: 512)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)
        context.scaleBy(x: symbolRect.size.width / 60, y: symbolRect.size.height / 60)

        NSAssetKit.drawSourceAppicon(logoTintColor: logoTintColor)
        context.restoreGState()
    }

    @objc open class func drawAppIconiPadPro(logoTintColor: UIColor = UIColor(red: 0.300, green: 0.300, blue: 0.300, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 167, height: 167)
        context.saveGState()
        UIRectClip(symbolRect)
        context.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)
        context.scaleBy(x: symbolRect.size.width / 60, y: symbolRect.size.height / 60)

        NSAssetKit.drawSourceAppicon(logoTintColor: logoTintColor)
        context.restoreGState()
    }

    @objc open class func drawAlarmIcon() {

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 14.5, y: 19.88))
        bezier3Path.addCurve(to: CGPoint(x: 14.5, y: 18.5), controlPoint1: CGPoint(x: 14.5, y: 19.37), controlPoint2: CGPoint(x: 14.5, y: 18.64))
        bezier3Path.addLine(to: CGPoint(x: 7.5, y: 18.5))
        bezier3Path.addCurve(to: CGPoint(x: 7.5, y: 19.88), controlPoint1: CGPoint(x: 7.5, y: 18.66), controlPoint2: CGPoint(x: 7.5, y: 19.4))
        bezier3Path.addCurve(to: CGPoint(x: 8.65, y: 20.34), controlPoint1: CGPoint(x: 7.5, y: 20.07), controlPoint2: CGPoint(x: 7.95, y: 20.23))
        bezier3Path.addCurve(to: CGPoint(x: 11, y: 20.5), controlPoint1: CGPoint(x: 9.29, y: 20.44), controlPoint2: CGPoint(x: 10.12, y: 20.5))
        bezier3Path.addCurve(to: CGPoint(x: 14.5, y: 19.88), controlPoint1: CGPoint(x: 12.85, y: 20.5), controlPoint2: CGPoint(x: 14.5, y: 20.24))
        bezier3Path.close()
        UIColor.gray.setFill()
        bezier3Path.fill()
        UIColor.gray.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Group
        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 13.5, y: 2.04))
        bezier6Path.addCurve(to: CGPoint(x: 13.5, y: 2.91), controlPoint1: CGPoint(x: 13.5, y: 2.31), controlPoint2: CGPoint(x: 13.5, y: 2.61))
        bezier6Path.addCurve(to: CGPoint(x: 17.71, y: 8.1), controlPoint1: CGPoint(x: 15.91, y: 3.73), controlPoint2: CGPoint(x: 17.71, y: 5.69))
        bezier6Path.addCurve(to: CGPoint(x: 17.71, y: 13.7), controlPoint1: CGPoint(x: 17.71, y: 11.09), controlPoint2: CGPoint(x: 17.71, y: 12.24))
        bezier6Path.addCurve(to: CGPoint(x: 19.5, y: 16.5), controlPoint1: CGPoint(x: 17.71, y: 14.5), controlPoint2: CGPoint(x: 19.5, y: 16.05))
        bezier6Path.addLine(to: CGPoint(x: 2.5, y: 16.5))
        bezier6Path.addCurve(to: CGPoint(x: 4.29, y: 13.7), controlPoint1: CGPoint(x: 2.5, y: 16.1), controlPoint2: CGPoint(x: 4.29, y: 14.29))
        bezier6Path.addCurve(to: CGPoint(x: 4.29, y: 8.1), controlPoint1: CGPoint(x: 4.29, y: 12.18), controlPoint2: CGPoint(x: 4.29, y: 11.28))
        bezier6Path.addCurve(to: CGPoint(x: 6.5, y: 3.96), controlPoint1: CGPoint(x: 4.29, y: 6.42), controlPoint2: CGPoint(x: 5.16, y: 4.96))
        bezier6Path.addCurve(to: CGPoint(x: 7.74, y: 3.21), controlPoint1: CGPoint(x: 6.88, y: 3.67), controlPoint2: CGPoint(x: 7.3, y: 3.42))
        bezier6Path.addCurve(to: CGPoint(x: 8.5, y: 2.91), controlPoint1: CGPoint(x: 7.99, y: 3.1), controlPoint2: CGPoint(x: 8.24, y: 3))
        bezier6Path.addCurve(to: CGPoint(x: 8.5, y: 2.04), controlPoint1: CGPoint(x: 8.5, y: 2.61), controlPoint2: CGPoint(x: 8.5, y: 2.31))
        bezier6Path.addCurve(to: CGPoint(x: 8.7, y: 1.44), controlPoint1: CGPoint(x: 8.5, y: 1.83), controlPoint2: CGPoint(x: 8.57, y: 1.62))
        bezier6Path.addCurve(to: CGPoint(x: 9.32, y: 0.9), controlPoint1: CGPoint(x: 8.84, y: 1.23), controlPoint2: CGPoint(x: 9.06, y: 1.05))
        bezier6Path.addCurve(to: CGPoint(x: 11, y: 0.5), controlPoint1: CGPoint(x: 9.78, y: 0.65), controlPoint2: CGPoint(x: 10.37, y: 0.5))
        bezier6Path.addCurve(to: CGPoint(x: 13.5, y: 2.04), controlPoint1: CGPoint(x: 12.32, y: 0.5), controlPoint2: CGPoint(x: 13.5, y: 1.16))
        bezier6Path.close()
        UIColor.gray.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()
    }

    @objc open class func drawAlarmSliencedIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: 11, y: 3)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 3.5, y: 16.88))
        bezier5Path.addCurve(to: CGPoint(x: 3.5, y: 15.5), controlPoint1: CGPoint(x: 3.5, y: 16.37), controlPoint2: CGPoint(x: 3.5, y: 15.64))
        bezier5Path.addLine(to: CGPoint(x: -3.5, y: 15.5))
        bezier5Path.addCurve(to: CGPoint(x: -3.5, y: 16.88), controlPoint1: CGPoint(x: -3.5, y: 15.66), controlPoint2: CGPoint(x: -3.5, y: 16.4))
        bezier5Path.addCurve(to: CGPoint(x: -2.35, y: 17.34), controlPoint1: CGPoint(x: -3.5, y: 17.07), controlPoint2: CGPoint(x: -3.05, y: 17.23))
        bezier5Path.addCurve(to: CGPoint(x: 0, y: 17.5), controlPoint1: CGPoint(x: -1.71, y: 17.44), controlPoint2: CGPoint(x: -0.88, y: 17.5))
        bezier5Path.addCurve(to: CGPoint(x: 3.5, y: 16.88), controlPoint1: CGPoint(x: 1.85, y: 17.5), controlPoint2: CGPoint(x: 3.5, y: 17.24))
        bezier5Path.close()
        UIColor.gray.setFill()
        bezier5Path.fill()
        UIColor.gray.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()

        context.restoreGState()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 14.44, y: 16.5))
        bezier9Path.addCurve(to: CGPoint(x: 2.5, y: 16.5), controlPoint1: CGPoint(x: 9.43, y: 16.5), controlPoint2: CGPoint(x: 2.5, y: 16.5))
        bezier9Path.addCurve(to: CGPoint(x: 4.29, y: 13.7), controlPoint1: CGPoint(x: 2.5, y: 16.1), controlPoint2: CGPoint(x: 4.29, y: 14.29))
        bezier9Path.addCurve(to: CGPoint(x: 4.29, y: 8.1), controlPoint1: CGPoint(x: 4.29, y: 12.18), controlPoint2: CGPoint(x: 4.29, y: 11.28))
        bezier9Path.addCurve(to: CGPoint(x: 4.53, y: 6.59), controlPoint1: CGPoint(x: 4.29, y: 7.57), controlPoint2: CGPoint(x: 4.38, y: 7.07))
        bezier9Path.move(to: CGPoint(x: 6.23, y: 4.17))
        bezier9Path.addCurve(to: CGPoint(x: 6.5, y: 3.96), controlPoint1: CGPoint(x: 6.32, y: 4.1), controlPoint2: CGPoint(x: 6.41, y: 4.03))
        bezier9Path.addCurve(to: CGPoint(x: 7.74, y: 3.21), controlPoint1: CGPoint(x: 6.88, y: 3.67), controlPoint2: CGPoint(x: 7.3, y: 3.42))
        bezier9Path.addCurve(to: CGPoint(x: 8.5, y: 2.91), controlPoint1: CGPoint(x: 7.99, y: 3.1), controlPoint2: CGPoint(x: 8.24, y: 3))
        bezier9Path.addCurve(to: CGPoint(x: 8.5, y: 2.04), controlPoint1: CGPoint(x: 8.5, y: 2.61), controlPoint2: CGPoint(x: 8.5, y: 2.31))
        bezier9Path.addCurve(to: CGPoint(x: 8.69, y: 1.45), controlPoint1: CGPoint(x: 8.5, y: 1.83), controlPoint2: CGPoint(x: 8.57, y: 1.63))
        bezier9Path.addCurve(to: CGPoint(x: 9.32, y: 0.9), controlPoint1: CGPoint(x: 8.84, y: 1.23), controlPoint2: CGPoint(x: 9.06, y: 1.05))
        bezier9Path.addCurve(to: CGPoint(x: 11, y: 0.5), controlPoint1: CGPoint(x: 9.78, y: 0.65), controlPoint2: CGPoint(x: 10.37, y: 0.5))
        bezier9Path.addCurve(to: CGPoint(x: 13.5, y: 2.04), controlPoint1: CGPoint(x: 12.32, y: 0.5), controlPoint2: CGPoint(x: 13.5, y: 1.16))
        bezier9Path.addCurve(to: CGPoint(x: 13.5, y: 2.91), controlPoint1: CGPoint(x: 13.5, y: 2.31), controlPoint2: CGPoint(x: 13.5, y: 2.61))
        bezier9Path.addCurve(to: CGPoint(x: 17.71, y: 8.1), controlPoint1: CGPoint(x: 15.91, y: 3.73), controlPoint2: CGPoint(x: 17.71, y: 5.69))
        bezier9Path.addCurve(to: CGPoint(x: 17.71, y: 13.7), controlPoint1: CGPoint(x: 17.71, y: 11.09), controlPoint2: CGPoint(x: 17.71, y: 12.24))
        bezier9Path.addCurve(to: CGPoint(x: 19.5, y: 16.5), controlPoint1: CGPoint(x: 17.71, y: 14.5), controlPoint2: CGPoint(x: 19.5, y: 16.05))
        bezier9Path.addCurve(to: CGPoint(x: 18.56, y: 16.5), controlPoint1: CGPoint(x: 19.5, y: 16.5), controlPoint2: CGPoint(x: 19.15, y: 16.5))
        bezier9Path.lineCapStyle = .round;

        UIColor.gray.setStroke()
        bezier9Path.lineWidth = 1
        bezier9Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 3, y: 3))
        bezier7Path.addLine(to: CGPoint(x: 19, y: 19))
        bezier7Path.lineCapStyle = .round;

        UIColor.gray.setStroke()
        bezier7Path.lineWidth = 1.5
        bezier7Path.stroke()
    }

    @objc open class func drawAnimatedAlarm(arrowTintColor: UIColor = UIColor(red: 1.000, green: 0.067, blue: 0.310, alpha: 1.000), alarmSwing: CGFloat = 0.5, alarmSlientVisible: Bool = false, alarmSnoozeRemaining: String = "--") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Variable Declarations
        let alarmAngle: CGFloat = alarmSwing == 0 ? -10 : floor(10 * alarmSwing)

        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 13.5, y: 2.04))
        bezier6Path.addCurve(to: CGPoint(x: 13.5, y: 2.91), controlPoint1: CGPoint(x: 13.5, y: 2.31), controlPoint2: CGPoint(x: 13.5, y: 2.61))
        bezier6Path.addCurve(to: CGPoint(x: 17.71, y: 8.1), controlPoint1: CGPoint(x: 15.91, y: 3.73), controlPoint2: CGPoint(x: 17.71, y: 5.69))
        bezier6Path.addCurve(to: CGPoint(x: 17.71, y: 13.7), controlPoint1: CGPoint(x: 17.71, y: 11.09), controlPoint2: CGPoint(x: 17.71, y: 12.24))
        bezier6Path.addCurve(to: CGPoint(x: 19.5, y: 16.5), controlPoint1: CGPoint(x: 17.71, y: 14.5), controlPoint2: CGPoint(x: 19.5, y: 16.05))
        bezier6Path.addLine(to: CGPoint(x: 2.5, y: 16.5))
        bezier6Path.addCurve(to: CGPoint(x: 4.29, y: 13.7), controlPoint1: CGPoint(x: 2.5, y: 16.1), controlPoint2: CGPoint(x: 4.29, y: 14.29))
        bezier6Path.addCurve(to: CGPoint(x: 4.29, y: 8.1), controlPoint1: CGPoint(x: 4.29, y: 12.18), controlPoint2: CGPoint(x: 4.29, y: 11.28))
        bezier6Path.addCurve(to: CGPoint(x: 6.5, y: 3.96), controlPoint1: CGPoint(x: 4.29, y: 6.42), controlPoint2: CGPoint(x: 5.16, y: 4.96))
        bezier6Path.addCurve(to: CGPoint(x: 7.74, y: 3.21), controlPoint1: CGPoint(x: 6.88, y: 3.67), controlPoint2: CGPoint(x: 7.3, y: 3.42))
        bezier6Path.addCurve(to: CGPoint(x: 8.5, y: 2.91), controlPoint1: CGPoint(x: 7.99, y: 3.1), controlPoint2: CGPoint(x: 8.24, y: 3))
        bezier6Path.addCurve(to: CGPoint(x: 8.5, y: 2.04), controlPoint1: CGPoint(x: 8.5, y: 2.61), controlPoint2: CGPoint(x: 8.5, y: 2.31))
        bezier6Path.addCurve(to: CGPoint(x: 8.7, y: 1.44), controlPoint1: CGPoint(x: 8.5, y: 1.83), controlPoint2: CGPoint(x: 8.57, y: 1.62))
        bezier6Path.addCurve(to: CGPoint(x: 9.32, y: 0.9), controlPoint1: CGPoint(x: 8.84, y: 1.23), controlPoint2: CGPoint(x: 9.06, y: 1.05))
        bezier6Path.addCurve(to: CGPoint(x: 11, y: 0.5), controlPoint1: CGPoint(x: 9.78, y: 0.65), controlPoint2: CGPoint(x: 10.37, y: 0.5))
        bezier6Path.addCurve(to: CGPoint(x: 13.5, y: 2.04), controlPoint1: CGPoint(x: 12.32, y: 0.5), controlPoint2: CGPoint(x: 13.5, y: 1.16))
        bezier6Path.close()
        arrowTintColor.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()


        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: 11, y: 3)
        context.rotate(by: -(alarmAngle - 5) * CGFloat(Double.pi) / 180)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 3.5, y: 16.88))
        bezier3Path.addCurve(to: CGPoint(x: 3.5, y: 15.5), controlPoint1: CGPoint(x: 3.5, y: 16.37), controlPoint2: CGPoint(x: 3.5, y: 15.64))
        bezier3Path.addLine(to: CGPoint(x: -3.5, y: 15.5))
        bezier3Path.addCurve(to: CGPoint(x: -3.5, y: 16.88), controlPoint1: CGPoint(x: -3.5, y: 15.66), controlPoint2: CGPoint(x: -3.5, y: 16.4))
        bezier3Path.addCurve(to: CGPoint(x: -2.35, y: 17.34), controlPoint1: CGPoint(x: -3.5, y: 17.07), controlPoint2: CGPoint(x: -3.05, y: 17.23))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 17.5), controlPoint1: CGPoint(x: -1.71, y: 17.44), controlPoint2: CGPoint(x: -0.88, y: 17.5))
        bezier3Path.addCurve(to: CGPoint(x: 3.5, y: 16.88), controlPoint1: CGPoint(x: 1.85, y: 17.5), controlPoint2: CGPoint(x: 3.5, y: 17.24))
        bezier3Path.close()
        arrowTintColor.setFill()
        bezier3Path.fill()
        arrowTintColor.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()

        context.restoreGState()


        if (alarmSlientVisible) {
            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 4.06, y: 2))
            bezier4Path.addLine(to: CGPoint(x: 20.56, y: 18.5))
            bezier4Path.addLine(to: CGPoint(x: 18.5, y: 20.56))
            bezier4Path.addLine(to: CGPoint(x: 2, y: 4.06))
            bezier4Path.addLine(to: CGPoint(x: 4.06, y: 2))
            bezier4Path.close()
            arrowTintColor.setFill()
            bezier4Path.fill()
        }


        //// Text Drawing
        let textRect = CGRect(x: 0, y: 0, width: 22, height: 22)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center

        let textFontAttributes = [NSAttributedString.Key.font: UIFont.systemFont(ofSize: 9), NSAttributedString.Key.foregroundColor: arrowTintColor, NSAttributedString.Key.paragraphStyle: textStyle]

        let textTextHeight: CGFloat = NSString(string: alarmSnoozeRemaining).boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        context.saveGState()
        context.clip(to: textRect)
        NSString(string: alarmSnoozeRemaining).draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
    }

    @objc open class func drawTableViewBackgroundView(backgroundFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 320)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let logoShadowColor = NSAssetKit.appLogoTintColor.colorWithShadow(0.218)

        //// Gradient Declarations
        let tableBackgroundViewGradient = CGGradient(colorsSpace: CGColorSpaceCreateDeviceRGB(), colors: [NSAssetKit.darkNavColor.cgColor, NSAssetKit.darkNavColor.blendedColorWithFraction(0.5, ofColor: logoShadowColor).cgColor, logoShadowColor.cgColor] as CFArray, locations: [0, 0.51, 1])!

        //// backgroundView Drawing
        let backgroundViewRect = CGRect(x: backgroundFrame.origin.x, y: backgroundFrame.origin.y, width: backgroundFrame.size.width, height: backgroundFrame.size.height)
        let backgroundViewPath = UIBezierPath(rect: backgroundViewRect)
        context.saveGState()
        backgroundViewPath.addClip()
        context.drawLinearGradient(tableBackgroundViewGradient,
            start: CGPoint(x: backgroundViewRect.midX, y: backgroundViewRect.minY),
            end: CGPoint(x: backgroundViewRect.midX, y: backgroundViewRect.maxY),
            options: CGGradientDrawingOptions())
        context.restoreGState()
    }

    //// Generated Images

    @objc open class func imageOfWatchFaceComposite(frame: CGRect = CGRect(x: 0, y: 0, width: 156, height: 195), arrowTintColor: UIColor = UIColor(red: 1.000, green: 0.067, blue: 0.310, alpha: 1.000), angle: CGFloat = 0, isArrowVisible: Bool = true, doubleUp: Bool = true, sgvText: String = "High", bg_delta: String = "+00 mg/dl", isUncomputable: Bool = true, computeAnimation: CGFloat = 0, textSizeForSgv: CGFloat = 39, textSizeForDelta: CGFloat = 27) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            NSAssetKit.drawWatchFaceComposite(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), arrowTintColor: arrowTintColor, angle: angle, isArrowVisible: isArrowVisible, doubleUp: doubleUp, sgvText: sgvText, bg_delta: bg_delta, isUncomputable: isUncomputable, computeAnimation: computeAnimation, textSizeForSgv: textSizeForSgv, textSizeForDelta: textSizeForDelta)

        let imageOfWatchFaceComposite = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfWatchFaceComposite
    }

    @objc open class var imageOfListIcon: UIImage {
        if Cache.imageOfListIcon != nil {
            return Cache.imageOfListIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            NSAssetKit.drawListIcon()

        Cache.imageOfListIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfListIcon!
    }

    @objc open class var imageOfSettingsIcon: UIImage {
        if Cache.imageOfSettingsIcon != nil {
            return Cache.imageOfSettingsIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            NSAssetKit.drawSettingsIcon()

        Cache.imageOfSettingsIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSettingsIcon!
    }

    @objc open class var imageOfAlarmIcon: UIImage {
        if Cache.imageOfAlarmIcon != nil {
            return Cache.imageOfAlarmIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            NSAssetKit.drawAlarmIcon()

        Cache.imageOfAlarmIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAlarmIcon!
    }

    @objc open class var imageOfAlarmSliencedIcon: UIImage {
        if Cache.imageOfAlarmSliencedIcon != nil {
            return Cache.imageOfAlarmSliencedIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            NSAssetKit.drawAlarmSliencedIcon()

        Cache.imageOfAlarmSliencedIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAlarmSliencedIcon!
    }

    @objc open class func imageOfAnimatedAlarm(arrowTintColor: UIColor = UIColor(red: 1.000, green: 0.067, blue: 0.310, alpha: 1.000), alarmSwing: CGFloat = 0.5, alarmSlientVisible: Bool = false, alarmSnoozeRemaining: String = "--") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
            NSAssetKit.drawAnimatedAlarm(arrowTintColor: arrowTintColor, alarmSwing: alarmSwing, alarmSlientVisible: alarmSlientVisible, alarmSnoozeRemaining: alarmSnoozeRemaining)

        let imageOfAnimatedAlarm = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAnimatedAlarm
    }

    //// Customization Infrastructure

    @IBOutlet var listIconTargets: [AnyObject]! {
        get { return Cache.listIconTargets }
        set {
            Cache.listIconTargets = newValue
            for target: AnyObject in newValue {
                var _ = target.perform(NSSelectorFromString("setImage:"), with: NSAssetKit.imageOfListIcon)
            }
        }
    }

    @IBOutlet var settingsIconTargets: [AnyObject]! {
        get { return Cache.settingsIconTargets }
        set {
            Cache.settingsIconTargets = newValue
            for target: AnyObject in newValue {
                  var _ = target.perform(NSSelectorFromString("setImage:"), with: NSAssetKit.imageOfSettingsIcon)
            }
        }
    }

    @IBOutlet var alarmIconTargets: [AnyObject]! {
        get { return Cache.alarmIconTargets }
        set {
            Cache.alarmIconTargets = newValue
            for target: AnyObject in newValue {
                  var _ = target.perform(NSSelectorFromString("setImage:"), with: NSAssetKit.imageOfAlarmIcon)
            }
        }
    }

    @IBOutlet var alarmSliencedIconTargets: [AnyObject]! {
        get { return Cache.alarmSliencedIconTargets }
        set {
            Cache.alarmSliencedIconTargets = newValue
            for target: AnyObject in newValue {
                  var _ = target.perform(NSSelectorFromString("setImage:"), with: NSAssetKit.imageOfAlarmSliencedIcon)
            }
        }
    }

}



extension UIColor {
    @objc func colorWithHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    @objc func colorWithSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    @objc func colorWithBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    @objc func colorWithAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    @objc func colorWithHighlight(_ highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    @objc func colorWithShadow(_ shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
    @objc func blendedColorWithFraction(_ fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
